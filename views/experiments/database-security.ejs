<%- include('../partials/header') %>

<div class="experiment-container" data-experiment-type="database-security">
  <!-- Left Column - Theory and Visualization -->
  <div class="experiment-left">
    <!-- Experiment Title -->
    <div class="card mb-4">
      <div class="card-header bg-primary text-white">
        <h3 class="mb-0">Database Security</h3>
  </div>
    </div>
    
    <!-- Aim Section -->
    <div class="card mb-4">
      <div class="card-header">
        <h5 class="mb-0">
          <i class="fas fa-bullseye section-icon"></i> Aim
        </h5>
      </div>
      <div class="card-body">
        <p>To understand and implement database security techniques, focusing on SQL injection prevention, data encryption, access control, and auditing to protect sensitive data stored in databases.</p>
      </div>
    </div>
    
    <!-- Algorithm Section -->
    <div class="card mb-4">
      <div class="card-header">
        <h5 class="mb-0">
          <i class="fas fa-code-branch section-icon"></i> Algorithm
        </h5>
      </div>
      <div class="card-body">
        <ol>
          <li>SQL Injection Prevention:</li>
          <ul>
            <li>Use parameterized queries/prepared statements</li>
            <li>Implement input validation and sanitization</li>
            <li>Apply least privilege principle for database accounts</li>
            <li>Use stored procedures for complex operations</li>
          </ul>
          <li>Data Encryption:</li>
          <ul>
            <li>Implement transparent data encryption (TDE) for data at rest</li>
            <li>Use secure transport layer (TLS/SSL) for data in transit</li>
            <li>Apply column-level encryption for sensitive data</li>
            <li>Implement proper key management</li>
          </ul>
          <li>Access Control:</li>
          <ul>
            <li>Implement role-based access control (RBAC)</li>
            <li>Apply principle of least privilege</li>
            <li>Implement row-level security where needed</li>
            <li>Use database views to restrict access to sensitive columns</li>
          </ul>
          <li>Auditing and Monitoring:</li>
          <ul>
            <li>Enable database auditing for sensitive operations</li>
            <li>Monitor for suspicious activities</li>
            <li>Implement alerts for security events</li>
            <li>Regularly review audit logs</li>
          </ul>
        </ol>
      </div>
    </div>
    
    <!-- Sample Input/Output Section -->
    <div class="card mb-4">
      <div class="card-header">
        <h5 class="mb-0">
          <i class="fas fa-exchange-alt section-icon"></i> Sample Input/Output
        </h5>
      </div>
      <div class="card-body">
        <div class="row">
          <div class="col-md-6">
            <h6><i class="fas fa-sign-in-alt me-2"></i>Sample Input:</h6>
            <pre class="bg-light p-3 rounded">User Input:
- Username: "admin' OR 1=1 --"
- Password: "anything"

Database Query (vulnerable):
"SELECT * FROM users WHERE username = '" + username + "' AND password = '" + password + "'"</pre>
          </div>
          <div class="col-md-6">
            <h6><i class="fas fa-sign-out-alt me-2"></i>Sample Output:</h6>
            <pre class="bg-light p-3 rounded">SQL Injection Analysis:
- Query is vulnerable
- Impact: Authentication bypass
- Risk Level: Critical

Secure Implementation:
- Using parameterized query
- Input validated
- Data encrypted
- Access controlled
- Action logged</pre>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Visualization Section -->
    <div class="card mb-4">
      <div class="card-header">
        <h5 class="mb-0">
          <i class="fas fa-chart-bar section-icon"></i> Visualization
        </h5>
      </div>
      <div class="card-body">
        <div class="mb-3">
          <label for="username" class="form-label">Username:</label>
          <input type="text" class="form-control" id="username" value="admin' OR 1=1 --">
        </div>
        
        <div class="mb-3">
          <label for="password" class="form-label">Password:</label>
          <input type="text" class="form-control" id="password" value="anything">
        </div>
        
          <div class="mb-3">
          <label for="query-type" class="form-label">Query Type:</label>
          <select class="form-select" id="query-type">
            <option value="vulnerable">Vulnerable Query</option>
            <option value="secure">Secure Query</option>
          </select>
        </div>
        
        <button class="btn btn-primary" id="visualize-btn">
          <i class="fas fa-play me-2"></i>Visualize Security Analysis
        </button>
        
        <div id="visualization-section" class="mt-4 d-none">
          <h6 class="mb-3">Security Analysis Steps:</h6>
          <div class="table-responsive">
            <table class="table table-bordered table-striped" id="visualization-table">
              <!-- Visualization table will be populated by JavaScript -->
            </table>
          </div>
          
          <div class="mt-3">
            <h6>Analysis Result:</h6>
            <div class="bg-light p-3 rounded" id="output-text"></div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Right Column - Code Editor and Output -->
  <div class="experiment-right">
    <!-- Code Editor Section -->
    <div class="card mb-4">
      <div class="card-header">
        <h5 class="mb-0 d-flex justify-content-between align-items-center">
          <span><i class="fas fa-keyboard section-icon"></i> Code</span>
          <div class="btn-group">
            <button class="btn btn-sm btn-light" id="language-select">
              <i class="fas fa-code"></i> Language: <span id="current-language">JavaScript</span>
            </button>
            <button class="btn btn-sm btn-light" id="clear-code">
              <i class="fas fa-eraser"></i> Clear
            </button>
          </div>
        </h5>
      </div>
      <div class="card-body">
        <div id="code-editor"></div>
        <div class="mt-3 d-flex justify-content-between">
          <button class="btn btn-success" id="run-code">
            <i class="fas fa-play me-2"></i>Run Code
          </button>
          <button class="btn btn-primary" id="submit-code">
            <i class="fas fa-paper-plane me-2"></i>Submit Code
          </button>
        </div>
      </div>
    </div>
    
    <!-- Output Section -->
    <div class="card">
      <div class="card-header">
        <h5 class="mb-0">
          <i class="fas fa-terminal section-icon"></i> Output
        </h5>
      </div>
      <div class="card-body">
        <pre id="output" class="output-area">Output will appear here...</pre>
      </div>
    </div>
  </div>
</div>

<!-- CodeMirror CSS and JS -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/theme/dracula.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/javascript/javascript.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/python/python.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/clike/clike.min.js"></script>

<style>
.experiment-container {
  display: flex;
  gap: 1rem;
  padding: 1rem;
}

.experiment-left,
.experiment-right {
  flex: 1;
  min-width: 0;
}

.section-icon {
  margin-right: 0.5rem;
}

.CodeMirror {
  height: 400px;
  border: 1px solid #ddd;
  border-radius: 4px;
}

.output-area {
  min-height: 100px;
  max-height: 300px;
  overflow-y: auto;
  background-color: #1e1e1e;
  color: #fff;
  padding: 1rem;
  border-radius: 4px;
  font-family: monospace;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Initialize CodeMirror
  const editor = CodeMirror(document.getElementById('code-editor'), {
    mode: 'javascript',
    theme: 'dracula',
    lineNumbers: true,
    matchBrackets: true,
    autoCloseBrackets: true,
    indentUnit: 2,
    tabSize: 2,
    value: `// Database Security Implementation
class DatabaseSecurityManager {
  constructor() {
    this.auditLog = [];
  }
  
  // Vulnerable query - DO NOT USE IN PRODUCTION
  vulnerableQuery(username, password) {
    // This demonstrates a vulnerable implementation
    const query = \`SELECT * FROM users WHERE username = '\${username}' AND password = '\${password}'\`;
    return { query, isVulnerable: true };
  }
  
  // Secure query using parameterized statements
  secureQuery(username, password) {
    // Your implementation here
  }
  
  // Validate user input
  validateInput(input, type) {
    // Your implementation here
  }
  
  // Encrypt sensitive data
  encryptData(data, type) {
    // Your implementation here
  }
  
  // Check user permissions
  checkPermission(userId, action, resource) {
    // Your implementation here
  }
  
  // Log an action to the audit trail
  logAudit(userId, action, details) {
    // Your implementation here
  }
}

// Example usage
const securityManager = new DatabaseSecurityManager();

// Test with malicious input
const maliciousUsername = "admin' OR 1=1 --";
const password = "anything";

// Test vulnerable query
console.log("SQL Injection Analysis:");
const vulnerableResult = securityManager.vulnerableQuery(
  maliciousUsername, password
);

// Test secure implementation
console.log("\\nSecure Implementation:");
const secureResult = securityManager.secureQuery(
  maliciousUsername, password
);`
  });

  // Language selection
  const languageSelect = document.getElementById('language-select');
  const currentLanguage = document.getElementById('current-language');
  const languages = ['JavaScript', 'Python', 'Java'];
  let currentLangIndex = 0;

  languageSelect.addEventListener('click', () => {
    currentLangIndex = (currentLangIndex + 1) % languages.length;
    const lang = languages[currentLangIndex];
    currentLanguage.textContent = lang;
    editor.setOption('mode', lang.toLowerCase());
  });

  // Clear code button
  document.getElementById('clear-code').addEventListener('click', () => {
    if (confirm('Are you sure you want to clear your code? This cannot be undone.')) {
      editor.setValue('');
    }
  });

  // Run code button
  document.getElementById('run-code').addEventListener('click', () => {
    const code = editor.getValue();
    if (!code.trim()) {
      if (window.showNotification) {
        window.showNotification('Please write some code before running.', 'error');
      } else {
        alert('Please write some code before running.');
      }
      return;
    }

    const output = document.getElementById('output');
    output.textContent = 'Running code...\n';

    // Simulate code execution
      setTimeout(() => {
      try {
        output.textContent = `SQL Injection Analysis:
- Vulnerable Query: SELECT * FROM users WHERE username = 'admin' OR 1=1 --' AND password = 'anything'
- Injection Type: Authentication bypass
- Impact: Unauthorized access to all user accounts
- Risk Level: Critical

Secure Implementation:
1. Parameterized Query:
   const query = "SELECT * FROM users WHERE username = ? AND password = ?";
   const params = [username, password];

2. Input Validation:
   - Username validation: Alphanumeric characters only
   - Password validation: Complex password requirements

3. Data Encryption:
   - Passwords stored using bcrypt
   - Sensitive data encrypted using AES-256

4. Access Control:
   - Role-based permissions implemented
   - Row-level security applied

5. Audit Trail:
   - Login attempts logged
   - Sensitive data access recorded
   - Security alerts configured`;

        if (window.showNotification) {
          window.showNotification('Code executed successfully!', 'success');
        }
      } catch (error) {
        output.textContent = `Error: ${error.message}`;
        if (window.showNotification) {
          window.showNotification('Error executing code: ' + error.message, 'error');
        }
      }
    }, 1000);
  });

  // Submit code button
  document.getElementById('submit-code').addEventListener('click', () => {
    const code = editor.getValue();
    const output = document.getElementById('output').textContent;

    if (!code.trim()) {
      if (window.showNotification) {
        window.showNotification('Please write some code before submitting.', 'error');
      } else {
        alert('Please write some code before submitting.');
      }
      return;
      }
      
      if (output === 'Output will appear here...') {
      if (window.showNotification) {
        window.showNotification('Please run your code before submitting.', 'error');
      } else {
        alert('Please run your code before submitting.');
      }
      return;
      }
      
    // Submit code to server
    fetch('/experiments/database-security/submit', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ code, output })
      })
      .then(response => response.json())
      .then(data => {
      if (data.success) {
        if (window.showNotification) {
          window.showNotification('Code submitted successfully!', 'success');
        } else {
          alert('Code submitted successfully!');
        }
        
        // Update progress in localStorage
        const progress = JSON.parse(localStorage.getItem('experimentProgress') || '{}');
        progress['database-security'] = true;
        localStorage.setItem('experimentProgress', JSON.stringify(progress));
      } else {
        throw new Error(data.message || 'Submission failed');
        }
      })
      .catch(error => {
      console.error('Submit error:', error);
      if (window.showNotification) {
        window.showNotification('Error submitting code: ' + error.message, 'error');
      } else {
        alert('Error submitting code: ' + error.message);
      }
    });
  });

  // Visualization
  const visualizeBtn = document.getElementById('visualize-btn');
  const visualizationSection = document.getElementById('visualization-section');
  const visualizationTable = document.getElementById('visualization-table');
  const outputText = document.getElementById('output-text');
  const username = document.getElementById('username');
  const password = document.getElementById('password');
  const queryType = document.getElementById('query-type');

  visualizeBtn.addEventListener('click', () => {
    const user = username.value.trim();
    const pass = password.value.trim();
    const type = queryType.value;

    if (!user || !pass) {
      if (window.showNotification) {
        window.showNotification('Please enter both username and password.', 'error');
      } else {
        alert('Please enter both username and password.');
      }
      return;
    }

    // Show visualization section
    visualizationSection.classList.remove('d-none');

    // Update visualization table based on query type
    if (type === 'vulnerable') {
      visualizationTable.innerHTML = `
        <thead class="table-dark">
          <tr>
            <th>Step</th>
            <th>Operation</th>
            <th>Result</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>1</td>
            <td>Build Query</td>
            <td>SELECT * FROM users WHERE username = '${user}' AND password = '${pass}'</td>
          </tr>
          <tr>
            <td>2</td>
            <td>Analyze Query</td>
            <td class="text-danger">SQL Injection vulnerability detected</td>
          </tr>
          <tr>
            <td>3</td>
            <td>Execute Query</td>
            <td class="text-danger">Authentication bypass successful</td>
          </tr>
        </tbody>
      `;

      outputText.innerHTML = `<div class="text-danger">
        <strong>Security Analysis:</strong><br>
        - Query is vulnerable to SQL injection<br>
        - Authentication can be bypassed<br>
        - All user records could be exposed<br>
        - Critical security risk detected
      </div>`;
    } else {
      visualizationTable.innerHTML = `
        <thead class="table-dark">
          <tr>
            <th>Step</th>
            <th>Operation</th>
            <th>Result</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>1</td>
            <td>Input Validation</td>
            <td class="text-success">Input sanitized and validated</td>
          </tr>
          <tr>
            <td>2</td>
            <td>Prepare Query</td>
            <td>SELECT * FROM users WHERE username = ? AND password = ?</td>
          </tr>
          <tr>
            <td>3</td>
            <td>Bind Parameters</td>
            <td>Parameters securely bound to query</td>
          </tr>
          <tr>
            <td>4</td>
            <td>Execute Query</td>
            <td class="text-success">Query executed securely</td>
          </tr>
        </tbody>
      `;

      outputText.innerHTML = `<div class="text-success">
        <strong>Security Analysis:</strong><br>
        - Query is protected against SQL injection<br>
        - Input properly validated and sanitized<br>
        - Parameters securely bound<br>
        - Execution logged for audit trail
      </div>`;
    }
    });
  });
</script>

<%- include('../partials/footer') %> 
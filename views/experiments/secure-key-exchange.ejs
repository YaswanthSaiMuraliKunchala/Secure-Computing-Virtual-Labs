<%- include('../partials/header') %>

<div class="experiment-container" data-experiment-type="secure-key-exchange">
  <!-- Left Column - Theory and Visualization -->
  <div class="experiment-left">
    <!-- Experiment Title -->
    <div class="card mb-4">
      <div class="card-header bg-primary text-white">
        <h3 class="mb-0">Secure Key Exchange</h3>
  </div>
    </div>
    
    <!-- Aim Section -->
    <div class="card mb-4">
      <div class="card-header">
        <h5 class="mb-0">
          <i class="fas fa-bullseye section-icon"></i> Aim
        </h5>
      </div>
      <div class="card-body">
        <p class="theme-text">To securely exchange the cryptographic keys over Internet to implement Diffie-Hellman key exchange mechanism.</p>
      </div>
    </div>
    
    <!-- Algorithm Section -->
    <div class="card mb-4">
      <div class="card-header">
        <h5 class="mb-0">
          <i class="fas fa-code-branch section-icon"></i> Algorithm
        </h5>
      </div>
      <div class="card-body">
        <ol class="theme-text">
          <li>Input:
            <ul>
              <li>p: A prime number.</li>
              <li>g: A primitive root of p.</li>
              <li>The user is prompted to enter a prime number p and a number g (which is a primitive root of p).</li>
            </ul>
          </li>
          <li>Initialize Classes:
            <ul>
              <li>Class A: Represents Alice and Bob.
                <ul>
                  <li>init: Generate a random private number n for Alice/Bob.</li>
                  <li>publish: Calculate and return the public value g^n % p.</li>
                  <li>compute_secret: Compute the shared secret (gb^n) % p using another party's public value gb.</li>
                  <li>Represents Alice and Bob.</li>
                  <li>Generates a random private number n.</li>
                  <li>Computes and returns the public value using publish.</li>
                  <li>Computes the shared secret using compute_secret.</li>
                </ul>
              </li>
              <li>Class B: Represents Eve.
                <ul>
                  <li>init: Generate two random private numbers a and b for Eve.</li>
                  <li>publish: Calculate and return the public value g^arr[i] % p for Eve's private numbers.</li>
                  <li>compute_secret: Compute the shared secret (ga^arr[i]) % p using another party's public value ga.</li>
                  <li>Represents Eve.</li>
                  <li>Generates two random private numbers a and b.</li>
                  <li>Computes and returns the public value using publish.</li>
                  <li>Computes the shared secret using compute_secret.</li>
                </ul>
              </li>
            </ul>
          </li>
          <li>Create Instances:
            <ul>
              <li>Create an instance of A for Alice.</li>
              <li>Create an instance of A for Bob.</li>
              <li>Create an instance of B for Eve.</li>
              <li>Instances of A are created for Alice and Bob.</li>
              <li>An instance of B is created for Eve.</li>
              <li>Private numbers selected by Alice, Bob, and Eve are printed.</li>
              <li>Public values are generated and printed.</li>
              <li>Shared secrets are computed and printed.</li>
            </ul>
          </li>
          <li>Print Private Numbers:
            <ul>
              <li>Print the private numbers selected by Alice, Bob, and Eve.</li>
            </ul>
          </li>
          <li>Generate Public Values:
            <ul>
              <li>Calculate Alice's public value ga = g^alice.n % p.</li>
              <li>Calculate Bob's public value gb = g^bob.n % p.</li>
              <li>Calculate Eve's public values gea = g^eve.a % p and geb = g^eve.b % p.</li>
            </ul>
          </li>
          <li>Print Public Values:
            <ul>
              <li>Print the public values generated by Alice, Bob, and Eve.</li>
            </ul>
          </li>
          <li>Compute Shared Secrets:
            <ul>
              <li>Calculate Alice's shared secret with Eve sa = gea^alice.n % p.</li>
              <li>Calculate Eve's shared secret with Alice sea = ga^eve.a % p.</li>
              <li>Calculate Bob's shared secret with Eve sb = geb^bob.n % p.</li>
              <li>Calculate Eve's shared secret with Bob seb = gb^eve.b % p.</li>
            </ul>
          </li>
          <li>Print Shared Secrets:
            <ul>
              <li>Print the shared secrets computed by Alice, Bob, and Eve.</li>
            </ul>
          </li>
        </ol>
      </div>
    </div>
    
    <!-- Sample Input/Output Section -->
    <div class="card mb-4">
      <div class="card-header">
        <h5 class="mb-0">
          <i class="fas fa-exchange-alt section-icon"></i> Sample Input/Output
        </h5>
      </div>
      <div class="card-body">
        <div class="row">
          <div class="col-md-6">
            <h6 class="theme-text"><i class="fas fa-sign-in-alt me-2"></i>Sample Input:</h6>
            <pre class="bg-light p-3 rounded">Enter a prime number (p) : 227
Enter a number (g) : 14
Alice selected (a) : 227
Bob selected (b) : 170
Eve selected private number for Alice (c) : 65
Eve selected private number for Bob (d) : 175</pre>
          </div>
          <div class="col-md-6">
            <h6 class="theme-text"><i class="fas fa-sign-out-alt me-2"></i>Sample Output:</h6>
            <pre class="bg-light p-3 rounded">Alice published (ga): 14
Bob published (gb): 101
Eve published value for Alice (gc): 41
Eve published value for Bob (gd): 32
Alice computed (S1) : 41
Eve computed key for Alice (S1) : 41
Bob computed (S2) : 167
Eve computed key for Bob (S2) : 167</pre>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Visualization Section -->
    <div class="card mb-4">
      <div class="card-header">
        <h5 class="mb-0">
          <i class="fas fa-chart-bar section-icon"></i> Visualization
        </h5>
      </div>
      <div class="card-body">
        <div class="row">
          <div class="col-md-6">
            <div class="mb-3">
              <label for="prime" class="form-label theme-text">Prime Number (p):</label>
              <input type="number" class="form-control" id="prime" value="227" min="3">
            </div>
            <div class="mb-3">
              <label for="generator" class="form-label theme-text">Generator (g):</label>
              <input type="number" class="form-control" id="generator" value="14" min="2">
            </div>
          </div>
          <div class="col-md-6">
            <div class="mb-3">
              <label for="alice-private" class="form-label theme-text">Alice's Private Number:</label>
              <input type="number" class="form-control" id="alice-private" value="227" min="1">
            </div>
            <div class="mb-3">
              <label for="bob-private" class="form-label theme-text">Bob's Private Number:</label>
              <input type="number" class="form-control" id="bob-private" value="170" min="1">
            </div>
            <div class="mb-3">
              <label for="eve-private-a" class="form-label theme-text">Eve's Private Number for Alice:</label>
              <input type="number" class="form-control" id="eve-private-a" value="65" min="1">
            </div>
            <div class="mb-3">
              <label for="eve-private-b" class="form-label theme-text">Eve's Private Number for Bob:</label>
              <input type="number" class="form-control" id="eve-private-b" value="175" min="1">
            </div>
          </div>
        </div>
        
        <button class="btn btn-primary" id="visualize-btn">
          <i class="fas fa-play me-2"></i>Visualize
        </button>
        
        <div id="visualization-section" class="mt-4 d-none">
          <h6 class="mb-3 theme-text">Diffie-Hellman Key Exchange Process:</h6>
          
          <div class="mb-4">
            <h6 class="theme-text">Step 1: Private Numbers</h6>
            <div class="table-responsive">
              <table class="table table-bordered table-striped" id="private-numbers-table">
                <thead>
                  <tr>
                    <th>Participant</th>
                    <th>Private Number</th>
                  </tr>
                </thead>
                <tbody>
                  <!-- Will be populated by JavaScript -->
                </tbody>
              </table>
            </div>
          </div>
          
          <div class="mb-4">
            <h6 class="theme-text">Step 2: Public Values</h6>
            <div class="table-responsive">
              <table class="table table-bordered table-striped" id="public-values-table">
                <thead>
                  <tr>
                    <th>Participant</th>
                    <th>Formula</th>
                    <th>Public Value</th>
                  </tr>
                </thead>
                <tbody>
                  <!-- Will be populated by JavaScript -->
                </tbody>
              </table>
            </div>
          </div>
          
          <div class="mb-4">
            <h6 class="theme-text">Step 3: Shared Secrets</h6>
            <div class="table-responsive">
              <table class="table table-bordered table-striped" id="shared-secrets-table">
                <thead>
                  <tr>
                    <th>Participant</th>
                    <th>Formula</th>
                    <th>Shared Secret</th>
                  </tr>
                </thead>
                <tbody>
                  <!-- Will be populated by JavaScript -->
                </tbody>
              </table>
            </div>
          </div>
          
          <div class="mt-3">
            <h6 class="theme-text">Output:</h6>
            <div class="bg-light p-3 rounded" id="output-text"></div>
          </div>
        </div>
      </div>
      </div>
    </div>
    
  <!-- Right Column - Code Editor and Output -->
  <div class="experiment-right">
    <!-- Code Editor Section -->
    <div class="card mb-4">
      <div class="card-header">
        <h5 class="mb-0">
          <i class="fas fa-keyboard section-icon"></i> Code
        </h5>
      </div>
      <div class="card-body">
        <!-- Language Selection -->
          <div class="mb-3">
          <label for="language-select" class="form-label">Select Language:</label>
          <select class="form-select" id="language-select">
            <option value="javascript">JavaScript</option>
            <option value="python">Python</option>
            <option value="java">Java</option>
            <option value="c">C</option>
            <option value="cpp">C++</option>
          </select>
        </div>
        
        <div class="code-editor-container">
          <div id="code-editor-wrapper">
            <!-- Code Mirror editor will be initialized here -->
            <textarea id="code-editor" class="form-control" rows="15">// Diffie-Hellman Key Exchange Implementation with Eve (Man-in-the-Middle)

// Class A represents Alice and Bob
class A {
  constructor(p, g) {
    this.p = p;
    this.g = g;
    // Generate a random private number
    this.n = Math.floor(Math.random() * (p - 2)) + 2;
  }
  
  // Calculate and return public value
  publish() {
    return modPow(this.g, this.n, this.p);
  }
  
  // Compute shared secret using another party's public value
  compute_secret(gb) {
    return modPow(gb, this.n, this.p);
  }
}

// Class B represents Eve
class B {
  constructor(p, g) {
    this.p = p;
    this.g = g;
    // Generate two random private numbers for Eve
    this.a = Math.floor(Math.random() * (p - 2)) + 2;
    this.b = Math.floor(Math.random() * (p - 2)) + 2;
  }
  
  // Calculate and return public value for a specific private number
  publish(i) {
    const arr = [this.a, this.b];
    return modPow(this.g, arr[i], this.p);
  }
  
  // Compute shared secret using another party's public value
  compute_secret(ga, i) {
    const arr = [this.a, this.b];
    return modPow(ga, arr[i], this.p);
  }
}

// Helper function for modular exponentiation
function modPow(base, exponent, modulus) {
  if (modulus === 1) return 0;
  
  let result = 1;
  base = base % modulus;
  
  while (exponent > 0) {
    if (exponent % 2 === 1) {
      result = (result * base) % modulus;
    }
    exponent = Math.floor(exponent / 2);
    base = (base * base) % modulus;
  }
  
  return result;
}

// Example usage
const p = 227; // Prime number
const g = 14;  // Generator

// Create instances for Alice, Bob, and Eve
const alice = new A(p, g);
const bob = new A(p, g);
const eve = new B(p, g);

// Override random values with fixed values for demonstration
alice.n = 227;
bob.n = 170;
eve.a = 65;
eve.b = 175;

// Print private numbers
console.log("Alice selected (a):", alice.n);
console.log("Bob selected (b):", bob.n);
console.log("Eve selected private number for Alice (c):", eve.a);
console.log("Eve selected private number for Bob (d):", eve.b);

// Generate public values
const ga = alice.publish();
const gb = bob.publish();
const gea = eve.publish(0); // Eve's public value for Alice
const geb = eve.publish(1); // Eve's public value for Bob

// Print public values
console.log("\nAlice published (ga):", ga);
console.log("Bob published (gb):", gb);
console.log("Eve published value for Alice (gc):", gea);
console.log("Eve published value for Bob (gd):", geb);

// Compute shared secrets
const sa = alice.compute_secret(gea); // Alice computes shared secret with Eve
const sea = eve.compute_secret(ga, 0); // Eve computes shared secret with Alice
const sb = bob.compute_secret(geb);   // Bob computes shared secret with Eve
const seb = eve.compute_secret(gb, 1); // Eve computes shared secret with Bob

// Print shared secrets
console.log("\nAlice computed (S1):", sa);
console.log("Eve computed key for Alice (S1):", sea);
console.log("Bob computed (S2):", sb);
console.log("Eve computed key for Bob (S2):", seb);</textarea>
          </div>
        </div>
        
        <div class="mt-3 d-flex justify-content-between">
          <button class="btn btn-secondary" id="clear-code-btn">
            <i class="fas fa-eraser me-2"></i>Clear Code
            </button>
          <button class="btn btn-primary" id="run-code-btn">
            <i class="fas fa-play me-2"></i>Run Code
            </button>
          </div>
      </div>
    </div>
    
    <!-- Output Section -->
    <div class="card mb-4">
      <div class="card-header">
        <h5 class="mb-0">
          <i class="fas fa-terminal section-icon"></i> Output
        </h5>
      </div>
      <div class="card-body">
        <div class="code-output bg-dark text-light p-3 rounded" id="code-output">
          <div class="text-muted">Run your code to see the output here...</div>
        </div>
        
        <div class="mt-3 d-flex justify-content-end">
          <button class="btn btn-success" id="submit-code-btn">
            <i class="fas fa-paper-plane me-2"></i>Submit
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- CodeMirror CSS and JS -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/theme/dracula.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/hint/show-hint.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/javascript/javascript.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/python/python.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/clike/clike.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/edit/matchbrackets.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/edit/closebrackets.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/hint/show-hint.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/hint/javascript-hint.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/hint/anyword-hint.min.js"></script>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Set experiment type on body
    document.body.setAttribute('data-experiment-type', 'secure-key-exchange');
    
    // Helper function for notifications if not defined elsewhere
    function showNotification(message, type) {
      if (window.showNotification) {
        window.showNotification(message, type);
      } else {
        alert(message);
      }
    }
    
    // Helper function for modular exponentiation
    function modPow(base, exponent, modulus) {
      if (modulus === 1) return 0;
      
      let result = 1;
      base = base % modulus;
      
      while (exponent > 0) {
        if (exponent % 2 === 1) {
          result = (result * base) % modulus;
        }
        exponent = Math.floor(exponent / 2);
        base = (base * base) % modulus;
      }
      
      return result;
    }
    
    // Initialize CodeMirror
    const codeEditorTextarea = document.getElementById('code-editor');
    const codeEditor = CodeMirror.fromTextArea(codeEditorTextarea, {
      lineNumbers: true,
      mode: 'javascript',
      theme: 'dracula',
      indentUnit: 2,
      smartIndent: true,
      tabSize: 2,
      indentWithTabs: false,
      lineWrapping: true,
      matchBrackets: true,
      autoCloseBrackets: true,
      extraKeys: {
        "Ctrl-Space": "autocomplete",
        "Tab": function(cm) {
          if (cm.somethingSelected()) {
            cm.indentSelection("add");
          } else {
            cm.replaceSelection("  ", "end");
          }
        }
      }
    });
    
    // Language selection
    const languageSelect = document.getElementById('language-select');
    languageSelect.addEventListener('change', function() {
      const language = this.value;
      let mode;
      
      switch(language) {
        case 'javascript':
          mode = 'javascript';
          break;
        case 'python':
          mode = 'python';
          break;
        case 'java':
          mode = 'text/x-java';
          break;
        case 'c':
          mode = 'text/x-csrc';
          break;
        case 'cpp':
          mode = 'text/x-c++src';
          break;
        default:
          mode = 'javascript';
      }
      
      codeEditor.setOption('mode', mode);
      
      // Update starter code based on language
      if (confirm('Changing language will replace your current code. Continue?')) {
        codeEditor.setValue(getStarterCode(language));
      } else {
        this.value = codeEditor.getOption('mode');
      }
    });
    
    // Helper function to get starter code for different languages
    function getStarterCode(language) {
      switch(language) {
        case 'javascript':
          return `// Diffie-Hellman Key Exchange Implementation with Eve (Man-in-the-Middle)

// Class A represents Alice and Bob
class A {
  constructor(p, g) {
    this.p = p;
    this.g = g;
    // Generate a random private number
    this.n = Math.floor(Math.random() * (p - 2)) + 2;
  }
  
  // Calculate and return public value
  publish() {
    return modPow(this.g, this.n, this.p);
  }
  
  // Compute shared secret using another party's public value
  compute_secret(gb) {
    return modPow(gb, this.n, this.p);
  }
}

// Class B represents Eve
class B {
  constructor(p, g) {
    this.p = p;
    this.g = g;
    // Generate two random private numbers for Eve
    this.a = Math.floor(Math.random() * (p - 2)) + 2;
    this.b = Math.floor(Math.random() * (p - 2)) + 2;
  }
  
  // Calculate and return public value for a specific private number
  publish(i) {
    const arr = [this.a, this.b];
    return modPow(this.g, arr[i], this.p);
  }
  
  // Compute shared secret using another party's public value
  compute_secret(ga, i) {
    const arr = [this.a, this.b];
    return modPow(ga, arr[i], this.p);
  }
}

// Helper function for modular exponentiation
function modPow(base, exponent, modulus) {
  if (modulus === 1) return 0;
  
  let result = 1;
  base = base % modulus;
  
  while (exponent > 0) {
    if (exponent % 2 === 1) {
      result = (result * base) % modulus;
    }
    exponent = Math.floor(exponent / 2);
    base = (base * base) % modulus;
  }
  
  return result;
}

// Example usage
const p = 227; // Prime number
const g = 14;  // Generator

// Create instances for Alice, Bob, and Eve
const alice = new A(p, g);
const bob = new A(p, g);
const eve = new B(p, g);

// Override random values with fixed values for demonstration
alice.n = 227;
bob.n = 170;
eve.a = 65;
eve.b = 175;

// Print private numbers
console.log("Alice selected (a):", alice.n);
console.log("Bob selected (b):", bob.n);
console.log("Eve selected private number for Alice (c):", eve.a);
console.log("Eve selected private number for Bob (d):", eve.b);

// Generate public values
const ga = alice.publish();
const gb = bob.publish();
const gea = eve.publish(0); // Eve's public value for Alice
const geb = eve.publish(1); // Eve's public value for Bob

// Print public values
console.log("\nAlice published (ga):", ga);
console.log("Bob published (gb):", gb);
console.log("Eve published value for Alice (gc):", gea);
console.log("Eve published value for Bob (gd):", geb);

// Compute shared secrets
const sa = alice.compute_secret(gea); // Alice computes shared secret with Eve
const sea = eve.compute_secret(ga, 0); // Eve computes shared secret with Alice
const sb = bob.compute_secret(geb);   // Bob computes shared secret with Eve
const seb = eve.compute_secret(gb, 1); // Eve computes shared secret with Bob

// Print shared secrets
console.log("\nAlice computed (S1):", sa);
console.log("Eve computed key for Alice (S1):", sea);
console.log("Bob computed (S2):", sb);
console.log("Eve computed key for Bob (S2):", seb);`;
        case 'python':
          return `# Diffie-Hellman Key Exchange Implementation with Eve (Man-in-the-Middle)

# Class A represents Alice and Bob
class A:
    def __init__(self, p, g):
        self.p = p
        self.g = g
        # Generate a random private number
        import random
        self.n = random.randint(2, p-1)
    
    # Calculate and return public value
    def publish(self):
        return pow(self.g, self.n, self.p)
    
    # Compute shared secret using another party's public value
    def compute_secret(self, gb):
        return pow(gb, self.n, self.p)

# Class B represents Eve
class B:
    def __init__(self, p, g):
        self.p = p
        self.g = g
        # Generate two random private numbers for Eve
        import random
        self.a = random.randint(2, p-1)
        self.b = random.randint(2, p-1)
    
    # Calculate and return public value for a specific private number
    def publish(self, i):
        arr = [self.a, self.b]
        return pow(self.g, arr[i], self.p)
    
    # Compute shared secret using another party's public value
    def compute_secret(self, ga, i):
        arr = [self.a, self.b]
        return pow(ga, arr[i], self.p)

# Example usage
p = 227  # Prime number
g = 14   # Generator

# Create instances for Alice, Bob, and Eve
alice = A(p, g)
bob = A(p, g)
eve = B(p, g)

# Override random values with fixed values for demonstration
alice.n = 227
bob.n = 170
eve.a = 65
eve.b = 175

# Print private numbers
print("Alice selected (a):", alice.n)
print("Bob selected (b):", bob.n)
print("Eve selected private number for Alice (c):", eve.a)
print("Eve selected private number for Bob (d):", eve.b)

# Generate public values
ga = alice.publish()
gb = bob.publish()
gea = eve.publish(0)  # Eve's public value for Alice
geb = eve.publish(1)  # Eve's public value for Bob

# Print public values
print("\nAlice published (ga):", ga)
print("Bob published (gb):", gb)
print("Eve published value for Alice (gc):", gea)
print("Eve published value for Bob (gd):", geb)

# Compute shared secrets
sa = alice.compute_secret(gea)  # Alice computes shared secret with Eve
sea = eve.compute_secret(ga, 0)  # Eve computes shared secret with Alice
sb = bob.compute_secret(geb)    # Bob computes shared secret with Eve
seb = eve.compute_secret(gb, 1)  # Eve computes shared secret with Bob

# Print shared secrets
print("\nAlice computed (S1):", sa)
print("Eve computed key for Alice (S1):", sea)
print("Bob computed (S2):", sb)
print("Eve computed key for Bob (S2):", seb)`;
        case 'java':
          return `// Diffie-Hellman Key Exchange Implementation with Eve (Man-in-the-Middle)
import java.util.Random;

// Class A represents Alice and Bob
class A {
    private int p;
    private int g;
    public int n;
    
    public A(int p, int g) {
        this.p = p;
        this.g = g;
        // Generate a random private number
        Random rand = new Random();
        this.n = rand.nextInt(p - 2) + 2;
    }
    
    // Calculate and return public value
    public int publish() {
        return modPow(g, n, p);
    }
    
    // Compute shared secret using another party's public value
    public int compute_secret(int gb) {
        return modPow(gb, n, p);
    }
}

// Class B represents Eve
class B {
    private int p;
    private int g;
    public int a;
    public int b;
    
    public B(int p, int g) {
        this.p = p;
        this.g = g;
        // Generate two random private numbers for Eve
        Random rand = new Random();
        this.a = rand.nextInt(p - 2) + 2;
        this.b = rand.nextInt(p - 2) + 2;
    }
    
    // Calculate and return public value for a specific private number
    public int publish(int i) {
        int[] arr = {a, b};
        return modPow(g, arr[i], p);
    }
    
    // Compute shared secret using another party's public value
    public int compute_secret(int ga, int i) {
        int[] arr = {a, b};
        return modPow(ga, arr[i], p);
    }
}

public class DiffieHellmanWithEve {
    // Helper function for modular exponentiation
    public static int modPow(int base, int exponent, int modulus) {
        if (modulus == 1) return 0;
        
        long result = 1;
        long b = base % modulus;
        
        while (exponent > 0) {
            if (exponent % 2 == 1) {
                result = (result * b) % modulus;
            }
            exponent = exponent >> 1;
            b = (b * b) % modulus;
        }
        
        return (int) result;
    }
    
    public static void main(String[] args) {
        int p = 227; // Prime number
        int g = 14;  // Generator
        
        // Create instances for Alice, Bob, and Eve
        A alice = new A(p, g);
        A bob = new A(p, g);
        B eve = new B(p, g);
        
        // Override random values with fixed values for demonstration
        alice.n = 227;
        bob.n = 170;
        eve.a = 65;
        eve.b = 175;
        
        // Print private numbers
        System.out.println("Alice selected (a): " + alice.n);
        System.out.println("Bob selected (b): " + bob.n);
        System.out.println("Eve selected private number for Alice (c): " + eve.a);
        System.out.println("Eve selected private number for Bob (d): " + eve.b);
        
        // Generate public values
        int ga = alice.publish();
        int gb = bob.publish();
        int gea = eve.publish(0); // Eve's public value for Alice
        int geb = eve.publish(1); // Eve's public value for Bob
        
        // Print public values
        System.out.println("\nAlice published (ga): " + ga);
        System.out.println("Bob published (gb): " + gb);
        System.out.println("Eve published value for Alice (gc): " + gea);
        System.out.println("Eve published value for Bob (gd): " + geb);
        
        // Compute shared secrets
        int sa = alice.compute_secret(gea); // Alice computes shared secret with Eve
        int sea = eve.compute_secret(ga, 0); // Eve computes shared secret with Alice
        int sb = bob.compute_secret(geb);   // Bob computes shared secret with Eve
        int seb = eve.compute_secret(gb, 1); // Eve computes shared secret with Bob
        
        // Print shared secrets
        System.out.println("\nAlice computed (S1): " + sa);
        System.out.println("Eve computed key for Alice (S1): " + sea);
        System.out.println("Bob computed (S2): " + sb);
        System.out.println("Eve computed key for Bob (S2): " + seb);
    }
}`;
        case 'c':
          return `// Diffie-Hellman Key Exchange Implementation with Eve (Man-in-the-Middle)
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Helper function for modular exponentiation
int modPow(int base, int exponent, int modulus) {
    if (modulus == 1) return 0;
    
    long long result = 1;
    long long b = base % modulus;
    
    while (exponent > 0) {
        if (exponent % 2 == 1) {
            result = (result * b) % modulus;
        }
        exponent = exponent >> 1;
        b = (b * b) % modulus;
    }
    
    return (int) result;
}

// Structure for Alice and Bob
typedef struct {
    int p;
    int g;
    int n;
} A;

// Structure for Eve
typedef struct {
    int p;
    int g;
    int a;
    int b;
} B;

// Initialize Alice or Bob
void init_A(A* person, int p, int g) {
    person->p = p;
    person->g = g;
    // Generate a random private number
    person->n = rand() % (p - 2) + 2;
}

// Calculate and return public value for Alice or Bob
int publish_A(A* person) {
    return modPow(person->g, person->n, person->p);
}

// Compute shared secret for Alice or Bob
int compute_secret_A(A* person, int gb) {
    return modPow(gb, person->n, person->p);
}

// Initialize Eve
void init_B(B* eve, int p, int g) {
    eve->p = p;
    eve->g = g;
    // Generate two random private numbers for Eve
    eve->a = rand() % (p - 2) + 2;
    eve->b = rand() % (p - 2) + 2;
}

// Calculate and return public value for Eve
int publish_B(B* eve, int i) {
    int arr[2] = {eve->a, eve->b};
    return modPow(eve->g, arr[i], eve->p);
}

// Compute shared secret for Eve
int compute_secret_B(B* eve, int ga, int i) {
    int arr[2] = {eve->a, eve->b};
    return modPow(ga, arr[i], eve->p);
}

int main() {
    // Seed random number generator
    srand(time(NULL));
    
    int p = 227; // Prime number
    int g = 14;  // Generator
    
    // Create instances for Alice, Bob, and Eve
    A alice, bob;
    B eve;
    
    init_A(&alice, p, g);
    init_A(&bob, p, g);
    init_B(&eve, p, g);
    
    // Override random values with fixed values for demonstration
    alice.n = 227;
    bob.n = 170;
    eve.a = 65;
    eve.b = 175;
    
    // Print private numbers
    printf("Alice selected (a): %d\n", alice.n);
    printf("Bob selected (b): %d\n", bob.n);
    printf("Eve selected private number for Alice (c): %d\n", eve.a);
    printf("Eve selected private number for Bob (d): %d\n", eve.b);
    
    // Generate public values
    int ga = publish_A(&alice);
    int gb = publish_A(&bob);
    int gea = publish_B(&eve, 0); // Eve's public value for Alice
    int geb = publish_B(&eve, 1); // Eve's public value for Bob
    
    // Print public values
    printf("\nAlice published (ga): %d\n", ga);
    printf("Bob published (gb): %d\n", gb);
    printf("Eve published value for Alice (gc): %d\n", gea);
    printf("Eve published value for Bob (gd): %d\n", geb);
    
    // Compute shared secrets
    int sa = compute_secret_A(&alice, gea); // Alice computes shared secret with Eve
    int sea = compute_secret_B(&eve, ga, 0); // Eve computes shared secret with Alice
    int sb = compute_secret_A(&bob, geb);   // Bob computes shared secret with Eve
    int seb = compute_secret_B(&eve, gb, 1); // Eve computes shared secret with Bob
    
    // Print shared secrets
    printf("\nAlice computed (S1): %d\n", sa);
    printf("Eve computed key for Alice (S1): %d\n", sea);
    printf("Bob computed (S2): %d\n", sb);
    printf("Eve computed key for Bob (S2): %d\n", seb);
    
    return 0;
}`;
        case 'cpp':
          return `// Diffie-Hellman Key Exchange Implementation with Eve (Man-in-the-Middle)
#include <iostream>
#include <cstdlib>
#include <ctime>

// Helper function for modular exponentiation
int modPow(int base, int exponent, int modulus) {
    if (modulus == 1) return 0;
    
    long long result = 1;
    long long b = base % modulus;
    
    while (exponent > 0) {
        if (exponent % 2 == 1) {
            result = (result * b) % modulus;
        }
        exponent = exponent >> 1;
        b = (b * b) % modulus;
    }
    
    return (int) result;
}

// Class A represents Alice and Bob
class A {
private:
    int p;
    int g;
    
public:
    int n;
    
    A(int p, int g) {
        this->p = p;
        this->g = g;
        // Generate a random private number
        this->n = rand() % (p - 2) + 2;
    }
    
    // Calculate and return public value
    int publish() {
        return modPow(g, n, p);
    }
    
    // Compute shared secret using another party's public value
    int compute_secret(int gb) {
        return modPow(gb, n, p);
    }
};

// Class B represents Eve
class B {
private:
    int p;
    int g;
    
public:
    int a;
    int b;
    
    B(int p, int g) {
        this->p = p;
        this->g = g;
        // Generate two random private numbers for Eve
        this->a = rand() % (p - 2) + 2;
        this->b = rand() % (p - 2) + 2;
    }
    
    // Calculate and return public value for a specific private number
    int publish(int i) {
        int arr[2] = {a, b};
        return modPow(g, arr[i], p);
    }
    
    // Compute shared secret using another party's public value
    int compute_secret(int ga, int i) {
        int arr[2] = {a, b};
        return modPow(ga, arr[i], p);
    }
};

int main() {
    // Seed random number generator
    srand(time(NULL));
    
    int p = 227; // Prime number
    int g = 14;  // Generator
    
    // Create instances for Alice, Bob, and Eve
    A alice(p, g);
    A bob(p, g);
    B eve(p, g);
    
    // Override random values with fixed values for demonstration
    alice.n = 227;
    bob.n = 170;
    eve.a = 65;
    eve.b = 175;
    
    // Print private numbers
    std::cout << "Alice selected (a): " << alice.n << std::endl;
    std::cout << "Bob selected (b): " << bob.n << std::endl;
    std::cout << "Eve selected private number for Alice (c): " << eve.a << std::endl;
    std::cout << "Eve selected private number for Bob (d): " << eve.b << std::endl;
    
    // Generate public values
    int ga = alice.publish();
    int gb = bob.publish();
    int gea = eve.publish(0); // Eve's public value for Alice
    int geb = eve.publish(1); // Eve's public value for Bob
    
    // Print public values
    std::cout << "\nAlice published (ga): " << ga << std::endl;
    std::cout << "Bob published (gb): " << gb << std::endl;
    std::cout << "Eve published value for Alice (gc): " << gea << std::endl;
    std::cout << "Eve published value for Bob (gd): " << geb << std::endl;
    
    // Compute shared secrets
    int sa = alice.compute_secret(gea); // Alice computes shared secret with Eve
    int sea = eve.compute_secret(ga, 0); // Eve computes shared secret with Alice
    int sb = bob.compute_secret(geb);   // Bob computes shared secret with Eve
    int seb = eve.compute_secret(gb, 1); // Eve computes shared secret with Bob
    
    // Print shared secrets
    std::cout << "\nAlice computed (S1): " << sa << std::endl;
    std::cout << "Eve computed key for Alice (S1): " << sea << std::endl;
    std::cout << "Bob computed (S2): " << sb << std::endl;
    std::cout << "Eve computed key for Bob (S2): " << seb << std::endl;
    
    return 0;
}`;
        default:
          return codeEditor.getValue();
      }
    }
    
    // Clear code button
    const clearCodeBtn = document.getElementById('clear-code-btn');
    if (clearCodeBtn) {
      clearCodeBtn.addEventListener('click', function() {
        if (confirm('Are you sure you want to clear your code? All changes will be lost.')) {
          codeEditor.setValue('');
        }
      });
    }
    
    // Run code button
    const runCodeBtn = document.getElementById('run-code-btn');
    const codeOutput = document.getElementById('code-output');
    
    if (runCodeBtn && codeOutput) {
      runCodeBtn.addEventListener('click', function() {
        const code = codeEditor.getValue();
        const language = languageSelect.value;
        
        if (!code.trim()) {
          codeOutput.innerHTML = '<span class="text-danger">Error: Please write some code before running.</span>';
        return;
      }
      
        // Show loading state
        codeOutput.innerHTML = '<div class="text-info"><i class="fas fa-spinner fa-spin me-2"></i>Running code...</div>';
        
        // Send code to server for execution
        fetch('/experiments/secure-key-exchange/run', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ code, language })
        })
        .then(response => response.json())
        .then(data => {
          if (data.error) {
            codeOutput.innerHTML = `<span class="text-danger">Error: ${data.error}</span>`;
          } else {
            codeOutput.innerHTML = `<pre>${data.output}</pre>`;
          }
        })
        .catch(error => {
          console.error('Run code error:', error);
          codeOutput.innerHTML = '<span class="text-danger">An error occurred while running the code. Please try again.</span>';
        });
      });
    }
    
    // Submit code button
    const submitCodeBtn = document.getElementById('submit-code-btn');
    
    if (submitCodeBtn) {
      submitCodeBtn.addEventListener('click', function() {
        const code = codeEditor.getValue();
        const language = languageSelect.value;
        
        if (!code.trim()) {
          showNotification('Please write some code before submitting.', 'error');
        return;
      }
      
        // Show loading state
        submitCodeBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Submitting...';
        submitCodeBtn.disabled = true;
        
        // Send code to server for submission
        fetch('/experiments/secure-key-exchange/submit', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
          body: JSON.stringify({ code, language })
      })
      .then(response => response.json())
      .then(data => {
          if (data.error) {
            showNotification(data.error, 'error');
        } else {
            showNotification('Code submitted successfully!', 'success');
            
            // Mark experiment as completed in localStorage
            const completedExperiments = JSON.parse(localStorage.getItem('completedExperiments')) || [];
            if (!completedExperiments.includes('secure-key-exchange')) {
              completedExperiments.push('secure-key-exchange');
              localStorage.setItem('completedExperiments', JSON.stringify(completedExperiments));
              
              // Update sidebar and progress
              if (typeof markCompletedExperiments === 'function') {
                markCompletedExperiments();
              }
            }
          }
          
          // Reset button state
          submitCodeBtn.innerHTML = '<i class="fas fa-paper-plane me-2"></i>Submit';
          submitCodeBtn.disabled = false;
      })
      .catch(error => {
          console.error('Submit code error:', error);
          showNotification('An error occurred while submitting the code. Please try again.', 'error');
          
          // Reset button state
          submitCodeBtn.innerHTML = '<i class="fas fa-paper-plane me-2"></i>Submit';
          submitCodeBtn.disabled = false;
        });
      });
    }
    
    // Visualization button
    const visualizeBtn = document.getElementById('visualize-btn');
    const visualizationSection = document.getElementById('visualization-section');
    const privateNumbersTable = document.getElementById('private-numbers-table');
    const publicValuesTable = document.getElementById('public-values-table');
    const sharedSecretsTable = document.getElementById('shared-secrets-table');
    const outputText = document.getElementById('output-text');
    const prime = document.getElementById('prime');
    const generator = document.getElementById('generator');
    const alicePrivate = document.getElementById('alice-private');
    const bobPrivate = document.getElementById('bob-private');
    const evePrivateA = document.getElementById('eve-private-a');
    const evePrivateB = document.getElementById('eve-private-b');
    
    if (visualizeBtn && visualizationSection && privateNumbersTable && publicValuesTable && sharedSecretsTable && outputText) {
      visualizeBtn.addEventListener('click', function() {
        const p = parseInt(prime.value);
        const g = parseInt(generator.value);
        const a = parseInt(alicePrivate.value);
        const b = parseInt(bobPrivate.value);
        const eveA = parseInt(evePrivateA.value);
        const eveB = parseInt(evePrivateB.value);
        
        // Validate inputs
        if (!p || !g || !a || !b || !eveA || !eveB) {
          showNotification('Please enter all required values.', 'error');
          return;
        }
        
        // Validate prime number
        if (p < 3) {
          showNotification('Prime number must be at least 3.', 'error');
          return;
        }
        
        // Validate generator
        if (g < 2 || g >= p) {
          showNotification('Generator must be between 2 and p-1.', 'error');
          return;
        }
        
        // Validate private numbers
        if (a <= 0 || a > p || b <= 0 || b > p || eveA <= 0 || eveA > p || eveB <= 0 || eveB > p) {
          showNotification('Private numbers must be positive and less than or equal to the prime number.', 'error');
          return;
        }
        
        // Show visualization section
        visualizationSection.classList.remove('d-none');
        
        try {
          // Generate Diffie-Hellman steps
          generateDHSteps(p, g, a, b, eveA, eveB).then(steps => {
            // Update private numbers table
            privateNumbersTable.innerHTML = `
              <thead>
                <tr>
                  <th>Participant</th>
                  <th>Private Number</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>Alice</td>
                  <td>${a}</td>
                </tr>
                <tr>
                  <td>Bob</td>
                  <td>${b}</td>
                </tr>
                <tr>
                  <td>Eve</td>
                  <td>${eveA} (for Alice), ${eveB} (for Bob)</td>
                </tr>
              </tbody>
            `;
            
            // Update public values table
            publicValuesTable.innerHTML = `
              <thead>
                <tr>
                  <th>Participant</th>
                  <th>Formula</th>
                  <th>Public Value</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>Alice</td>
                  <td>g^a mod p</td>
                  <td>${steps.alicePublic}</td>
                </tr>
                <tr>
                  <td>Bob</td>
                  <td>g^b mod p</td>
                  <td>${steps.bobPublic}</td>
                </tr>
                <tr>
                  <td>Eve</td>
                  <td>g^${eveA} mod p</td>
                  <td>${steps.evePublicA}</td>
                </tr>
                <tr>
                  <td>Eve</td>
                  <td>g^${eveB} mod p</td>
                  <td>${steps.evePublicB}</td>
                </tr>
              </tbody>
            `;
            
            // Update shared secrets table
            sharedSecretsTable.innerHTML = `
              <thead>
                <tr>
                  <th>Participant</th>
                  <th>Formula</th>
                  <th>Shared Secret</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>Alice</td>
                  <td>(g^${eveA})^${a} mod p</td>
                  <td>${steps.aliceShared}</td>
                </tr>
                <tr>
                  <td>Eve</td>
                  <td>(g^${a})^${eveA} mod p</td>
                  <td>${steps.eveSharedA}</td>
                </tr>
                <tr>
                  <td>Bob</td>
                  <td>(g^${eveB})^${b} mod p</td>
                  <td>${steps.bobShared}</td>
                </tr>
                <tr>
                  <td>Eve</td>
                  <td>(g^${b})^${eveB} mod p</td>
                  <td>${steps.eveSharedB}</td>
                </tr>
              </tbody>
            `;
            
            // Update output text
            outputText.innerHTML = `
              <div class="theme-text">
                <strong>Prime (p):</strong> ${p}<br>
                <strong>Generator (g):</strong> ${g}<br><br>
                <strong>Alice published (ga):</strong> ${steps.alicePublic}<br>
                <strong>Bob published (gb):</strong> ${steps.bobPublic}<br>
                <strong>Eve published value for Alice (gc):</strong> ${steps.evePublicA}<br>
                <strong>Eve published value for Bob (gd):</strong> ${steps.evePublicB}<br><br>
                <strong>Alice computed (S1):</strong> ${steps.aliceShared}<br>
                <strong>Eve computed key for Alice (S1):</strong> ${steps.eveSharedA}<br>
                <strong>Bob computed (S2):</strong> ${steps.bobShared}<br>
                <strong>Eve computed key for Bob (S2):</strong> ${steps.eveSharedB}
              </div>
            `;
          }).catch(error => {
            console.error('Visualization error:', error);
            showNotification('An error occurred during visualization. Please try again.', 'error');
          });
        } catch (error) {
          console.error('Visualization error:', error);
          showNotification('An error occurred during visualization. Please try again.', 'error');
        }
      });
    }
    
    // Helper function to generate Diffie-Hellman steps
    function generateDHSteps(p, g, a, b, eveA, eveB) {
      return new Promise((resolve) => {
        // Simulate Diffie-Hellman key exchange
        setTimeout(() => {
          // Calculate public keys
          const alicePublic = modPow(g, a, p);
          const bobPublic = modPow(g, b, p);
          const evePublicA = modPow(g, eveA, p);
          const evePublicB = modPow(g, eveB, p);
          
          // Calculate shared secrets
          const aliceShared = modPow(evePublicA, a, p);
          const bobShared = modPow(evePublicB, b, p);
          const eveSharedA = modPow(alicePublic, eveA, p);
          const eveSharedB = modPow(bobPublic, eveB, p);
          
          const steps = {
            alicePublic,
            bobPublic,
            aliceShared,
            bobShared,
            evePublicA,
            evePublicB,
            eveSharedA,
            eveSharedB
          };
          resolve(steps);
        }, 500); // Simulate processing time
      });
    }
  });
</script>

<%- include('../partials/footer') %> 
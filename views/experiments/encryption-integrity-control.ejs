<%- include('../partials/header') %>

<div class="experiment-container" data-experiment-type="encryption-integrity-control">
  <!-- Left Column - Theory and Visualization -->
  <div class="experiment-left">
    <!-- Experiment Title -->
    <div class="card mb-4">
      <div class="card-header bg-primary text-white">
        <h3 class="mb-0">Encryption Integrity Control</h3>
      </div>
    </div>
    
    <!-- Aim Section -->
    <div class="card mb-4">
      <div class="card-header">
        <h5 class="mb-0">
          <i class="fas fa-bullseye section-icon"></i> Aim
        </h5>
      </div>
      <div class="card-body">
        <p>To understand and implement encryption integrity control mechanisms, focusing on authenticated encryption techniques that provide both confidentiality and integrity for sensitive data.</p>
      </div>
    </div>
    
    <!-- Algorithm Section -->
    <div class="card mb-4">
      <div class="card-header">
        <h5 class="mb-0">
          <i class="fas fa-code-branch section-icon"></i> Algorithm
        </h5>
      </div>
      <div class="card-body">
        <ol>
          <li>Authenticated Encryption:</li>
          <ul>
            <li>Galois/Counter Mode (GCM):
              <ul>
                <li>Combines counter mode encryption with Galois mode authentication</li>
                <li>Provides both confidentiality and integrity in a single operation</li>
                <li>Produces an authentication tag that verifies both the ciphertext and additional authenticated data</li>
              </ul>
            </li>
            <li>Encrypt-then-MAC (EtM):
              <ul>
                <li>First encrypt the plaintext to get ciphertext</li>
                <li>Then compute a MAC (Message Authentication Code) of the ciphertext</li>
                <li>Both ciphertext and MAC are transmitted</li>
                <li>Receiver first verifies the MAC, then decrypts if valid</li>
              </ul>
            </li>
          </ul>
          <li>Implementation Considerations:</li>
          <ul>
            <li>Use standard cryptographic libraries and algorithms</li>
            <li>Prefer Authenticated Encryption with Associated Data (AEAD) modes like GCM</li>
            <li>Implement proper key management</li>
            <li>Use secure random number generation for IVs/nonces</li>
            <li>Handle errors securely without leaking information</li>
          </ul>
        </ol>
      </div>
    </div>
    
    <!-- Sample Input/Output Section -->
    <div class="card mb-4">
      <div class="card-header">
        <h5 class="mb-0">
          <i class="fas fa-exchange-alt section-icon"></i> Sample Input/Output
        </h5>
      </div>
      <div class="card-body">
        <div class="row">
          <div class="col-md-6">
            <h6><i class="fas fa-sign-in-alt me-2"></i>Sample Input:</h6>
            <pre class="bg-light p-3 rounded">Plaintext: "This is a confidential message"
Encryption Key: "0123456789abcdef0123456789abcdef"
Authentication Key: "fedcba9876543210fedcba9876543210"
Associated Data: "Header information"</pre>
          </div>
          <div class="col-md-6">
            <h6><i class="fas fa-sign-out-alt me-2"></i>Sample Output:</h6>
            <pre class="bg-light p-3 rounded">AES-GCM:
- IV/Nonce: 3b8f6c4a1e2d7b5a9c8f
- Ciphertext: [encrypted data]
- Auth Tag: 9a8b7c6d5e4f3a2b1c0d

Encrypt-then-MAC:
- IV: 1a2b3c4d5e6f7a8b9c0d
- Ciphertext: [encrypted data]
- HMAC: 5e4f3a2b1c0d9a8b7c6d</pre>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Visualization Section -->
    <div class="card mb-4">
      <div class="card-header">
        <h5 class="mb-0">
          <i class="fas fa-chart-bar section-icon"></i> Visualization
        </h5>
      </div>
      <div class="card-body">
        <div class="mb-3">
          <label for="plaintext" class="form-label">Plaintext:</label>
          <input type="text" class="form-control" id="plaintext" value="This is a confidential message">
        </div>
        
        <div class="mb-3">
          <label for="mode" class="form-label">Encryption Mode:</label>
          <select class="form-select" id="mode">
            <option value="aes-gcm">AES-GCM</option>
            <option value="encrypt-then-mac">Encrypt-then-MAC</option>
          </select>
        </div>
        
        <button class="btn btn-primary" id="visualize-btn">
          <i class="fas fa-play me-2"></i>Visualize Encryption Process
        </button>
        
        <div id="visualization-section" class="mt-4 d-none">
          <h6 class="mb-3">Encryption Process:</h6>
          <div class="table-responsive">
            <table class="table table-bordered table-striped" id="visualization-table">
              <!-- Visualization table will be populated by JavaScript -->
            </table>
          </div>
          
          <div class="mt-3">
            <h6>Final Result:</h6>
            <div class="bg-light p-3 rounded" id="output-text"></div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Right Column - Code Editor and Output -->
  <div class="experiment-right">
    <!-- Code Editor Section -->
    <div class="card mb-4">
      <div class="card-header">
        <h5 class="mb-0 d-flex justify-content-between align-items-center">
          <span><i class="fas fa-keyboard section-icon"></i> Code</span>
          <div class="btn-group">
            <button class="btn btn-sm btn-light" id="language-select">
              <i class="fas fa-code"></i> Language: <span id="current-language">JavaScript</span>
            </button>
            <button class="btn btn-sm btn-light" id="clear-code">
              <i class="fas fa-eraser"></i> Clear
            </button>
          </div>
        </h5>
      </div>
      <div class="card-body">
        <div id="code-editor"></div>
        <div class="mt-3 d-flex justify-content-between">
          <button class="btn btn-success" id="run-code">
            <i class="fas fa-play me-2"></i>Run Code
          </button>
          <button class="btn btn-primary" id="submit-code">
            <i class="fas fa-paper-plane me-2"></i>Submit Code
          </button>
        </div>
      </div>
    </div>
    
    <!-- Output Section -->
    <div class="card">
      <div class="card-header">
        <h5 class="mb-0">
          <i class="fas fa-terminal section-icon"></i> Output
        </h5>
      </div>
      <div class="card-body">
        <pre id="output" class="output-area">Output will appear here...</pre>
      </div>
    </div>
  </div>
</div>

<!-- CodeMirror CSS and JS -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/theme/dracula.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/javascript/javascript.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/python/python.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/clike/clike.min.js"></script>

<style>
.experiment-container {
  display: flex;
  gap: 1rem;
  padding: 1rem;
}

.experiment-left,
.experiment-right {
  flex: 1;
  min-width: 0;
}

.section-icon {
  margin-right: 0.5rem;
}

.CodeMirror {
  height: 400px;
  border: 1px solid #ddd;
  border-radius: 4px;
}

.output-area {
  min-height: 100px;
  max-height: 300px;
  overflow-y: auto;
  background-color: #1e1e1e;
  color: #fff;
  padding: 1rem;
  border-radius: 4px;
  font-family: monospace;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Initialize CodeMirror
  const editor = CodeMirror(document.getElementById('code-editor'), {
    mode: 'javascript',
    theme: 'dracula',
    lineNumbers: true,
    matchBrackets: true,
    autoCloseBrackets: true,
    indentUnit: 2,
    tabSize: 2,
    value: `// Encryption Integrity Control Implementation
class EncryptionIntegrityControl {
  constructor() {
    this.generateRandomBytes = (length) => {
      const result = [];
      for (let i = 0; i < length; i++) {
        result.push(Math.floor(Math.random() * 256)
          .toString(16).padStart(2, '0'));
      }
      return result.join('');
    };
  }
  
  encryptAESGCM(plaintext, key, associatedData) {
    // Your implementation here
  }
  
  decryptAESGCM(ciphertext, iv, authTag, key, associatedData) {
    // Your implementation here
  }
  
  encryptThenMAC(plaintext, encryptionKey, authKey) {
    // Your implementation here
  }
  
  verifyThenDecrypt(ciphertext, iv, hmac, encryptionKey, authKey) {
    // Your implementation here
  }
}

// Example usage
const encryptionControl = new EncryptionIntegrityControl();
const plaintext = "This is a confidential message";
const encryptionKey = "0123456789abcdef0123456789abcdef";
const authKey = "fedcba9876543210fedcba9876543210";
const associatedData = "Header information";

// Test AES-GCM
console.log("AES-GCM Encryption:");
const gcmResult = encryptionControl.encryptAESGCM(
  plaintext, encryptionKey, associatedData
);

// Test Encrypt-then-MAC
console.log("\\nEncrypt-then-MAC:");
const etmResult = encryptionControl.encryptThenMAC(
  plaintext, encryptionKey, authKey
);`
  });

  // Language selection
  const languageSelect = document.getElementById('language-select');
  const currentLanguage = document.getElementById('current-language');
  const languages = ['JavaScript', 'Python', 'Java'];
  let currentLangIndex = 0;

  languageSelect.addEventListener('click', () => {
    currentLangIndex = (currentLangIndex + 1) % languages.length;
    const lang = languages[currentLangIndex];
    currentLanguage.textContent = lang;
    editor.setOption('mode', lang.toLowerCase());
  });

  // Clear code button
  document.getElementById('clear-code').addEventListener('click', () => {
    if (confirm('Are you sure you want to clear your code? This cannot be undone.')) {
      editor.setValue('');
    }
  });

  // Run code button
  document.getElementById('run-code').addEventListener('click', () => {
    const code = editor.getValue();
    if (!code.trim()) {
      if (window.showNotification) {
        window.showNotification('Please write some code before running.', 'error');
      } else {
        alert('Please write some code before running.');
      }
      return;
    }

    const output = document.getElementById('output');
    output.textContent = 'Running code...\n';

    // Simulate code execution
    setTimeout(() => {
      try {
        output.textContent = `AES-GCM Encryption:
- IV/Nonce: 3b8f6c4a1e2d7b5a9c8f
- Ciphertext: [encrypted data]
- Auth Tag: 9a8b7c6d5e4f3a2b1c0d

Encrypt-then-MAC:
- IV: 1a2b3c4d5e6f7a8b9c0d
- Ciphertext: [encrypted data]
- HMAC: 5e4f3a2b1c0d9a8b7c6d

Integrity Verification:
- AES-GCM: Authentication successful
- Encrypt-then-MAC: HMAC verification successful
- Decrypted plaintext matches original: Yes`;

        if (window.showNotification) {
          window.showNotification('Code executed successfully!', 'success');
        }
      } catch (error) {
        output.textContent = `Error: ${error.message}`;
        if (window.showNotification) {
          window.showNotification('Error executing code: ' + error.message, 'error');
        }
      }
    }, 1000);
  });

  // Submit code button
  document.getElementById('submit-code').addEventListener('click', () => {
    const code = editor.getValue();
    const output = document.getElementById('output').textContent;

    if (!code.trim()) {
      if (window.showNotification) {
        window.showNotification('Please write some code before submitting.', 'error');
      } else {
        alert('Please write some code before submitting.');
      }
      return;
    }

    if (output === 'Output will appear here...') {
      if (window.showNotification) {
        window.showNotification('Please run your code before submitting.', 'error');
      } else {
        alert('Please run your code before submitting.');
      }
      return;
    }

    // Submit code to server
    fetch('/experiments/encryption-integrity-control/submit', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ code, output })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        if (window.showNotification) {
          window.showNotification('Code submitted successfully!', 'success');
        } else {
          alert('Code submitted successfully!');
        }
        
        // Update progress in localStorage
        const progress = JSON.parse(localStorage.getItem('experimentProgress') || '{}');
        progress['encryption-integrity-control'] = true;
        localStorage.setItem('experimentProgress', JSON.stringify(progress));
      } else {
        throw new Error(data.message || 'Submission failed');
      }
    })
    .catch(error => {
      console.error('Submit error:', error);
      if (window.showNotification) {
        window.showNotification('Error submitting code: ' + error.message, 'error');
      } else {
        alert('Error submitting code: ' + error.message);
      }
    });
  });

  // Visualization
  const visualizeBtn = document.getElementById('visualize-btn');
  const visualizationSection = document.getElementById('visualization-section');
  const visualizationTable = document.getElementById('visualization-table');
  const outputText = document.getElementById('output-text');
  const plaintext = document.getElementById('plaintext');
  const mode = document.getElementById('mode');

  visualizeBtn.addEventListener('click', () => {
    const text = plaintext.value.trim();
    const selectedMode = mode.value;

    if (!text) {
      if (window.showNotification) {
        window.showNotification('Please enter a message to encrypt.', 'error');
      } else {
        alert('Please enter a message to encrypt.');
      }
      return;
    }

    // Show visualization section
    visualizationSection.classList.remove('d-none');

    // Update visualization table based on selected mode
    if (selectedMode === 'aes-gcm') {
      visualizationTable.innerHTML = `
        <thead class="table-dark">
          <tr>
            <th>Step</th>
            <th>Operation</th>
            <th>Result</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>1</td>
            <td>Generate IV/Nonce</td>
            <td>3b8f6c4a1e2d7b5a9c8f</td>
          </tr>
          <tr>
            <td>2</td>
            <td>AES-GCM Encryption</td>
            <td>[encrypted data]</td>
          </tr>
          <tr>
            <td>3</td>
            <td>Generate Auth Tag</td>
            <td>9a8b7c6d5e4f3a2b1c0d</td>
          </tr>
        </tbody>
      `;
    } else {
      visualizationTable.innerHTML = `
        <thead class="table-dark">
          <tr>
            <th>Step</th>
            <th>Operation</th>
            <th>Result</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>1</td>
            <td>Generate IV</td>
            <td>1a2b3c4d5e6f7a8b9c0d</td>
          </tr>
          <tr>
            <td>2</td>
            <td>AES Encryption</td>
            <td>[encrypted data]</td>
          </tr>
          <tr>
            <td>3</td>
            <td>Generate HMAC</td>
            <td>5e4f3a2b1c0d9a8b7c6d</td>
          </tr>
        </tbody>
      `;
    }

    // Update output text
    outputText.innerHTML = selectedMode === 'aes-gcm' 
      ? `<strong>IV/Nonce:</strong> 3b8f6c4a1e2d7b5a9c8f<br>
         <strong>Ciphertext:</strong> [encrypted data]<br>
         <strong>Auth Tag:</strong> 9a8b7c6d5e4f3a2b1c0d`
      : `<strong>IV:</strong> 1a2b3c4d5e6f7a8b9c0d<br>
         <strong>Ciphertext:</strong> [encrypted data]<br>
         <strong>HMAC:</strong> 5e4f3a2b1c0d9a8b7c6d`;
  });
});
</script>

<%- include('../partials/footer') %> 
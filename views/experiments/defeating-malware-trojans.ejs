<%- include('../partials/header') %>

<div class="experiment-container" data-experiment-type="defeating-malware-trojans">
  <!-- Left Column - Theory and Visualization -->
  <div class="experiment-left">
    <!-- Experiment Title -->
    <div class="card mb-4">
      <div class="card-header bg-primary text-white">
        <h3 class="mb-0">Defeating Malware (Trojans)</h3>
      </div>
    </div>
    
    <!-- Aim Section -->
    <div class="card mb-4">
      <div class="card-header">
        <h5 class="mb-0">
          <i class="fas fa-bullseye section-icon"></i> Aim
        </h5>
      </div>
      <div class="card-body">
        <p>To understand and implement techniques for detecting and defeating Trojan malware, focusing on signature-based detection, behavioral analysis, and network traffic monitoring.</p>
      </div>
    </div>
    
    <!-- Algorithm Section -->
    <div class="card mb-4">
      <div class="card-header">
        <h5 class="mb-0">
          <i class="fas fa-code-branch section-icon"></i> Algorithm
        </h5>
      </div>
      <div class="card-body">
        <ol>
          <li>Signature-Based Detection:</li>
          <ul>
            <li>Maintain a database of known Trojan signatures (hash values, byte patterns)</li>
            <li>Scan files and compare against the signature database</li>
            <li>Flag matches as potential Trojans</li>
          </ul>
          <li>Behavioral Analysis:</li>
          <ul>
            <li>Monitor system for suspicious behaviors:
              <ul>
                <li>Unexpected network connections</li>
                <li>Unauthorized access to system resources</li>
                <li>Modification of system files</li>
                <li>Creation of unauthorized startup entries</li>
              </ul>
            </li>
            <li>Use heuristics to identify potential Trojan activity</li>
            <li>Flag suspicious behavior patterns</li>
          </ul>
          <li>Network Traffic Analysis:</li>
          <ul>
            <li>Monitor outbound connections for:
              <ul>
                <li>Connections to known malicious domains/IPs</li>
                <li>Unusual data transfer patterns</li>
                <li>Command and control (C2) communication</li>
              </ul>
            </li>
            <li>Analyze packet contents for suspicious patterns</li>
            <li>Block suspicious connections</li>
          </ul>
          <li>Mitigation Techniques:</li>
          <ul>
            <li>Isolate infected systems</li>
            <li>Remove malicious files and registry entries</li>
            <li>Block malicious network connections</li>
            <li>Implement preventive measures (firewall rules, application whitelisting)</li>
          </ul>
        </ol>
      </div>
    </div>
    
    <!-- Sample Input/Output Section -->
    <div class="card mb-4">
      <div class="card-header">
        <h5 class="mb-0">
          <i class="fas fa-exchange-alt section-icon"></i> Sample Input/Output
        </h5>
      </div>
      <div class="card-body">
        <div class="row">
          <div class="col-md-6">
            <h6><i class="fas fa-sign-in-alt me-2"></i>Sample Input:</h6>
            <pre class="bg-light p-3 rounded">System Data:
- New process: "svchost32.exe" in C:\Users\Admin\AppData\Roaming\
- File hash: e1112134d102bbf9e4d987b8a8d657e0
- Network connection to IP: 185.25.51.64 on port 4444
- Registry addition: HKCU\Software\Microsoft\Windows\CurrentVersion\Run\SystemService</pre>
          </div>
          <div class="col-md-6">
            <h6><i class="fas fa-sign-out-alt me-2"></i>Sample Output:</h6>
            <pre class="bg-light p-3 rounded">Trojan Detection Results:
- Signature match found
- Suspicious process location
- Malicious network connection
- Unauthorized startup entry

Mitigation Actions:
1. Terminate malicious process
2. Remove infected files
3. Block network connections
4. Clean registry entries
5. Update firewall rules</pre>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Visualization Section -->
    <div class="card mb-4">
      <div class="card-header">
        <h5 class="mb-0">
          <i class="fas fa-chart-bar section-icon"></i> Visualization
        </h5>
      </div>
      <div class="card-body">
        <div class="mb-3">
          <label for="process-name" class="form-label">Process Name:</label>
          <input type="text" class="form-control" id="process-name" value="svchost32.exe">
        </div>
        
        <div class="mb-3">
          <label for="file-hash" class="form-label">File Hash:</label>
          <input type="text" class="form-control" id="file-hash" value="e1112134d102bbf9e4d987b8a8d657e0">
        </div>
        
        <div class="mb-3">
          <label for="network-connection" class="form-label">Network Connection:</label>
          <input type="text" class="form-control" id="network-connection" value="185.25.51.64:4444">
        </div>
        
        <button class="btn btn-primary" id="visualize-btn">
          <i class="fas fa-play me-2"></i>Start Trojan Analysis
        </button>
        
        <div id="visualization-section" class="mt-4 d-none">
          <h6 class="mb-3">Analysis Progress:</h6>
          <div class="table-responsive">
            <table class="table table-bordered table-striped" id="visualization-table">
              <!-- Visualization table will be populated by JavaScript -->
            </table>
          </div>
          
          <div class="mt-3">
            <h6>Analysis Result:</h6>
            <div class="bg-light p-3 rounded" id="output-text"></div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Right Column - Code Editor and Output -->
  <div class="experiment-right">
    <!-- Code Editor Section -->
    <div class="card mb-4">
      <div class="card-header">
        <h5 class="mb-0 d-flex justify-content-between align-items-center">
          <span><i class="fas fa-keyboard section-icon"></i> Code</span>
          <div class="btn-group">
            <button class="btn btn-sm btn-light" id="language-select">
              <i class="fas fa-code"></i> Language: <span id="current-language">JavaScript</span>
            </button>
            <button class="btn btn-sm btn-light" id="clear-code">
              <i class="fas fa-eraser"></i> Clear
            </button>
          </div>
        </h5>
      </div>
      <div class="card-body">
        <div id="code-editor"></div>
        <div class="mt-3 d-flex justify-content-between">
          <button class="btn btn-success" id="run-code">
            <i class="fas fa-play me-2"></i>Run Code
          </button>
          <button class="btn btn-primary" id="submit-code">
            <i class="fas fa-paper-plane me-2"></i>Submit Code
          </button>
        </div>
      </div>
    </div>
    
    <!-- Output Section -->
    <div class="card">
      <div class="card-header">
        <h5 class="mb-0">
          <i class="fas fa-terminal section-icon"></i> Output
        </h5>
      </div>
      <div class="card-body">
        <pre id="output" class="output-area">Output will appear here...</pre>
      </div>
    </div>
  </div>
</div>

<!-- CodeMirror CSS and JS -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/theme/dracula.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/javascript/javascript.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/python/python.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/clike/clike.min.js"></script>

<style>
.experiment-container {
  display: flex;
  gap: 1rem;
  padding: 1rem;
}

.experiment-left,
.experiment-right {
  flex: 1;
  min-width: 0;
}

.section-icon {
  margin-right: 0.5rem;
}

.CodeMirror {
  height: 400px;
  border: 1px solid #ddd;
  border-radius: 4px;
}

.output-area {
  min-height: 100px;
  max-height: 300px;
  overflow-y: auto;
  background-color: #1e1e1e;
  color: #fff;
  padding: 1rem;
  border-radius: 4px;
  font-family: monospace;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Initialize CodeMirror
  const editor = CodeMirror(document.getElementById('code-editor'), {
    mode: 'javascript',
    theme: 'dracula',
    lineNumbers: true,
    matchBrackets: true,
    autoCloseBrackets: true,
    indentUnit: 2,
    tabSize: 2,
    value: `// Trojan Detection and Mitigation System
class TrojanDetector {
  constructor() {
    this.signatureDB = {
      "e1112134d102bbf9e4d987b8a8d657e0": "BlackShades",
      "a5bd844a25912b5d6e2355d48a5a1324": "DarkComet",
      "f8b12ceaa0c6e9c7752a40c1e1f10748": "NjRat"
    };
    
    this.maliciousIPs = [
      "185.25.51.64",
      "91.121.87.10",
      "46.165.220.143"
    ];
    
    this.suspiciousLocations = [
      "AppData\\\\Roaming",
      "Temp",
      "ProgramData"
    ];
    
    this.detectionResults = [];
    this.mitigationActions = [];
  }
  
  checkFileSignature(fileHash) {
    // Your implementation here
    // Check file against signature database
  }
  
  analyzeProcessBehavior(processName, processPath, pid) {
    // Your implementation here
    // Analyze process behavior for suspicious activity
  }
  
  analyzeNetworkConnection(sourceIP, destIP, destPort) {
    // Your implementation here
    // Analyze network traffic for suspicious patterns
  }
  
  analyzeRegistryEntry(registryKey, registryValue) {
    // Your implementation here
    // Check registry entries for malicious modifications
  }
  
  mitigateThreat(processName, processPath, pid, connections, registryEntries) {
    // Your implementation here
    // Perform threat mitigation actions
  }
  
  generateReport() {
    // Your implementation here
    // Generate detection and mitigation report
  }
}

// Example usage
const detector = new TrojanDetector();

// Test data
const fileHash = "e1112134d102bbf9e4d987b8a8d657e0";
const processName = "svchost32.exe";
const processPath = "C:\\\\Users\\\\Admin\\\\AppData\\\\Roaming\\\\svchost32.exe";
const pid = 4528;
const connection = {
  sourceIP: "192.168.1.5",
  destIP: "185.25.51.64",
  destPort: 4444
};
const registryEntry = {
  key: "HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\SystemService",
  value: "C:\\\\Users\\\\Admin\\\\AppData\\\\Roaming\\\\svchost32.exe"
};

// Run detection
console.log("Starting Trojan analysis...");

detector.checkFileSignature(fileHash);
detector.analyzeProcessBehavior(processName, processPath, pid);
detector.analyzeNetworkConnection(
  connection.sourceIP,
  connection.destIP,
  connection.destPort
);
detector.analyzeRegistryEntry(
  registryEntry.key,
  registryEntry.value
);

// Perform mitigation
detector.mitigateThreat(
  processName,
  processPath,
  pid,
  [connection],
  [registryEntry]
);

const report = detector.generateReport();
console.log(report);`
  });

  // Language selection
  const languageSelect = document.getElementById('language-select');
  const currentLanguage = document.getElementById('current-language');
  const languages = ['JavaScript', 'Python', 'Java'];
  let currentLangIndex = 0;

  languageSelect.addEventListener('click', () => {
    currentLangIndex = (currentLangIndex + 1) % languages.length;
    const lang = languages[currentLangIndex];
    currentLanguage.textContent = lang;
    editor.setOption('mode', lang.toLowerCase());
  });

  // Clear code button
  document.getElementById('clear-code').addEventListener('click', () => {
    if (confirm('Are you sure you want to clear your code? This cannot be undone.')) {
      editor.setValue('');
    }
  });

  // Run code button
  document.getElementById('run-code').addEventListener('click', () => {
    const code = editor.getValue();
    if (!code.trim()) {
      if (window.showNotification) {
        window.showNotification('Please write some code before running.', 'error');
      } else {
        alert('Please write some code before running.');
      }
      return;
    }

    const output = document.getElementById('output');
    output.textContent = 'Running code...\n';

    // Simulate code execution
    setTimeout(() => {
      try {
        output.textContent = `Starting Trojan analysis...

Trojan Detection Results:
- Signature Match: File hash e1112134d102bbf9e4d987b8a8d657e0 matches known Trojan "BlackShades"
- Behavioral Analysis: Suspicious process location and name (legitimate svchost.exe is in System32)
- Network Analysis: Connection to known malicious IP 185.25.51.64 (C2 server)
- Registry Analysis: Suspicious autorun entry detected

Mitigation Actions:
1. Terminated process svchost32.exe (PID: 4528)
2. Removed file C:\\Users\\Admin\\AppData\\Roaming\\svchost32.exe
3. Blocked outbound connection to 185.25.51.64:4444
4. Removed registry key HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\SystemService
5. Added firewall rule to block future connections to 185.25.51.64`;

        if (window.showNotification) {
          window.showNotification('Code executed successfully!', 'success');
        }
      } catch (error) {
        output.textContent = `Error: ${error.message}`;
        if (window.showNotification) {
          window.showNotification('Error executing code: ' + error.message, 'error');
        }
      }
    }, 1000);
  });

  // Submit code button
  document.getElementById('submit-code').addEventListener('click', () => {
    const code = editor.getValue();
    const output = document.getElementById('output').textContent;

    if (!code.trim()) {
      if (window.showNotification) {
        window.showNotification('Please write some code before submitting.', 'error');
      } else {
        alert('Please write some code before submitting.');
      }
      return;
    }

    if (output === 'Output will appear here...') {
      if (window.showNotification) {
        window.showNotification('Please run your code before submitting.', 'error');
      } else {
        alert('Please run your code before submitting.');
      }
      return;
    }

    // Submit code to server
    fetch('/experiments/defeating-malware-trojans/submit', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ code, output })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        if (window.showNotification) {
          window.showNotification('Code submitted successfully!', 'success');
        } else {
          alert('Code submitted successfully!');
        }
        
        // Update progress in localStorage
        const progress = JSON.parse(localStorage.getItem('experimentProgress') || '{}');
        progress['defeating-malware-trojans'] = true;
        localStorage.setItem('experimentProgress', JSON.stringify(progress));
      } else {
        throw new Error(data.message || 'Submission failed');
      }
    })
    .catch(error => {
      console.error('Submit error:', error);
      if (window.showNotification) {
        window.showNotification('Error submitting code: ' + error.message, 'error');
      } else {
        alert('Error submitting code: ' + error.message);
      }
    });
  });

  // Visualization
  const visualizeBtn = document.getElementById('visualize-btn');
  const visualizationSection = document.getElementById('visualization-section');
  const visualizationTable = document.getElementById('visualization-table');
  const outputText = document.getElementById('output-text');
  const processName = document.getElementById('process-name');
  const fileHash = document.getElementById('file-hash');
  const networkConnection = document.getElementById('network-connection');

  visualizeBtn.addEventListener('click', () => {
    const process = processName.value.trim();
    const hash = fileHash.value.trim();
    const connection = networkConnection.value.trim();

    if (!process || !hash || !connection) {
      if (window.showNotification) {
        window.showNotification('Please fill in all fields.', 'error');
      } else {
        alert('Please fill in all fields.');
      }
      return;
    }

    // Show visualization section
    visualizationSection.classList.remove('d-none');

    // Update visualization table
    visualizationTable.innerHTML = `
      <thead class="table-dark">
        <tr>
          <th>Step</th>
          <th>Operation</th>
          <th>Result</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>1</td>
          <td>Check File Signature</td>
          <td class="text-danger">Known Trojan signature detected</td>
        </tr>
        <tr>
          <td>2</td>
          <td>Analyze Process</td>
          <td class="text-warning">Suspicious process location</td>
        </tr>
        <tr>
          <td>3</td>
          <td>Check Network</td>
          <td class="text-danger">Connection to malicious IP</td>
        </tr>
        <tr>
          <td>4</td>
          <td>Scan Registry</td>
          <td class="text-warning">Unauthorized startup entry</td>
        </tr>
        <tr>
          <td>5</td>
          <td>Overall Analysis</td>
          <td class="text-danger">Active Trojan infection detected</td>
        </tr>
      </tbody>
    `;

    // Update output text
    outputText.innerHTML = `<div class="text-danger">
      <strong>Trojan Detection Summary:</strong><br>
      - Process "${process}" is suspicious<br>
      - File hash matches known Trojan<br>
      - Connection to malicious IP ${connection}<br>
      - Unauthorized system modifications detected<br>
      <br>
      <strong>Recommendation:</strong> Immediate system isolation and cleanup required
    </div>`;
  });
});
</script>

<%- include('../partials/footer') %> 
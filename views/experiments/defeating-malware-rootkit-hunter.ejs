<%- include('../partials/header') %>

<div class="experiment-container" data-experiment-type="defeating-malware-rootkit-hunter">
  <!-- Left Column - Theory and Visualization -->
  <div class="experiment-left">
    <!-- Experiment Title -->
    <div class="card mb-4">
      <div class="card-header bg-primary text-white">
        <h3 class="mb-0">Defeating Malware (Rootkit Hunter)</h3>
      </div>
    </div>
    
    <!-- Aim Section -->
    <div class="card mb-4">
      <div class="card-header">
        <h5 class="mb-0">
          <i class="fas fa-bullseye section-icon"></i> Aim
        </h5>
      </div>
      <div class="card-body">
        <p>To understand and implement techniques for detecting and removing rootkits, which are particularly dangerous types of malware that gain privileged access to a system while hiding their presence.</p>
      </div>
    </div>
    
    <!-- Algorithm Section -->
    <div class="card mb-4">
      <div class="card-header">
        <h5 class="mb-0">
          <i class="fas fa-code-branch section-icon"></i> Algorithm
        </h5>
      </div>
      <div class="card-body">
        <ol>
          <li>Signature-Based Detection:</li>
          <ul>
            <li>Maintain a database of known rootkit signatures</li>
            <li>Scan system files and compare against the signature database</li>
            <li>Flag matches as potential rootkits</li>
          </ul>
          <li>Behavioral Detection:</li>
          <ul>
            <li>Monitor system for suspicious behaviors:
              <ul>
                <li>Hidden processes or files</li>
                <li>Unexpected system call hooking</li>
                <li>Kernel module manipulation</li>
                <li>Unexpected network activity</li>
              </ul>
            </li>
            <li>Compare expected vs. actual system behavior</li>
            <li>Flag discrepancies as potential rootkit activity</li>
          </ul>
          <li>Cross-View Detection:</li>
          <ul>
            <li>Compare system information from different perspectives:
              <ul>
                <li>Compare directory listings from API vs. direct disk access</li>
                <li>Compare process lists from different sources</li>
                <li>Compare network connections from different views</li>
              </ul>
            </li>
            <li>Identify discrepancies that indicate hidden components</li>
          </ul>
          <li>Memory Analysis:</li>
          <ul>
            <li>Analyze system memory for:
              <ul>
                <li>Hidden processes</li>
                <li>Unauthorized code execution</li>
                <li>Kernel modifications</li>
                <li>Hooks in system call tables</li>
              </ul>
            </li>
            <li>Flag suspicious memory patterns</li>
          </ul>
          <li>Rootkit Removal:</li>
          <ul>
            <li>Boot from clean media (when possible)</li>
            <li>Identify and remove rootkit components</li>
            <li>Repair modified system files</li>
            <li>Remove persistence mechanisms</li>
          </ul>
        </ol>
      </div>
    </div>
    
    <!-- Sample Input/Output Section -->
    <div class="card mb-4">
      <div class="card-header">
        <h5 class="mb-0">
          <i class="fas fa-exchange-alt section-icon"></i> Sample Input/Output
        </h5>
      </div>
      <div class="card-body">
        <div class="row">
          <div class="col-md-6">
            <h6><i class="fas fa-sign-in-alt me-2"></i>Sample Input:</h6>
            <pre class="bg-light p-3 rounded">System Data:
- API Process List: [System, smss.exe, csrss.exe, winlogon.exe, services.exe]
- Direct Memory Process List: [System, smss.exe, csrss.exe, winlogon.exe, services.exe, hiddenproc.exe]
- Modified System Files: [ntoskrnl.exe, ntdll.dll]
- Hidden Registry Keys: [HKLM\SYSTEM\CurrentControlSet\Services\HiddenService]
- Suspicious Network Connection: 192.168.1.5:4321 -> 45.77.65.211:443</pre>
          </div>
          <div class="col-md-6">
            <h6><i class="fas fa-sign-out-alt me-2"></i>Sample Output:</h6>
            <pre class="bg-light p-3 rounded">Rootkit Detection Results:
- Hidden process detected
- System files modified
- Hidden registry entries found
- Suspicious network activity

Rootkit Analysis:
- Type: Kernel-mode rootkit
- Confidence: 95%
- Persistence: Boot-time loading
- Stealth: SSDT hooking

Removal Actions:
1. Boot in safe mode
2. Remove malicious process
3. Restore system files
4. Clean registry
5. Block malicious IPs</pre>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Visualization Section -->
    <div class="card mb-4">
      <div class="card-header">
        <h5 class="mb-0">
          <i class="fas fa-chart-bar section-icon"></i> Visualization
        </h5>
      </div>
      <div class="card-body">
        <div class="mb-3">
          <label for="scan-type" class="form-label">Scan Type:</label>
          <select class="form-select" id="scan-type">
            <option value="quick">Quick Scan</option>
            <option value="full">Full System Scan</option>
            <option value="memory">Memory Analysis</option>
          </select>
        </div>
        
        <div class="mb-3">
          <label for="target-path" class="form-label">Target Path:</label>
          <input type="text" class="form-control" id="target-path" value="C:\Windows\System32">
        </div>
        
        <button class="btn btn-primary" id="visualize-btn">
          <i class="fas fa-play me-2"></i>Start Rootkit Analysis
        </button>
        
        <div id="visualization-section" class="mt-4 d-none">
          <h6 class="mb-3">Analysis Progress:</h6>
          <div class="table-responsive">
            <table class="table table-bordered table-striped" id="visualization-table">
              <!-- Visualization table will be populated by JavaScript -->
            </table>
          </div>
          
          <div class="mt-3">
            <h6>Analysis Result:</h6>
            <div class="bg-light p-3 rounded" id="output-text"></div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Right Column - Code Editor and Output -->
  <div class="experiment-right">
    <!-- Code Editor Section -->
    <div class="card mb-4">
      <div class="card-header">
        <h5 class="mb-0 d-flex justify-content-between align-items-center">
          <span><i class="fas fa-keyboard section-icon"></i> Code</span>
          <div class="btn-group">
            <button class="btn btn-sm btn-light" id="language-select">
              <i class="fas fa-code"></i> Language: <span id="current-language">JavaScript</span>
            </button>
            <button class="btn btn-sm btn-light" id="clear-code">
              <i class="fas fa-eraser"></i> Clear
            </button>
          </div>
        </h5>
      </div>
      <div class="card-body">
        <div id="code-editor"></div>
        <div class="mt-3 d-flex justify-content-between">
          <button class="btn btn-success" id="run-code">
            <i class="fas fa-play me-2"></i>Run Code
          </button>
          <button class="btn btn-primary" id="submit-code">
            <i class="fas fa-paper-plane me-2"></i>Submit Code
          </button>
        </div>
      </div>
    </div>
    
    <!-- Output Section -->
    <div class="card">
      <div class="card-header">
        <h5 class="mb-0">
          <i class="fas fa-terminal section-icon"></i> Output
        </h5>
      </div>
      <div class="card-body">
        <pre id="output" class="output-area">Output will appear here...</pre>
      </div>
    </div>
  </div>
</div>

<!-- CodeMirror CSS and JS -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/theme/dracula.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/javascript/javascript.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/python/python.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/clike/clike.min.js"></script>

<style>
.experiment-container {
  display: flex;
  gap: 1rem;
  padding: 1rem;
}

.experiment-left,
.experiment-right {
  flex: 1;
  min-width: 0;
}

.section-icon {
  margin-right: 0.5rem;
}

.CodeMirror {
  height: 400px;
  border: 1px solid #ddd;
  border-radius: 4px;
}

.output-area {
  min-height: 100px;
  max-height: 300px;
  overflow-y: auto;
  background-color: #1e1e1e;
  color: #fff;
  padding: 1rem;
  border-radius: 4px;
  font-family: monospace;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Initialize CodeMirror
  const editor = CodeMirror(document.getElementById('code-editor'), {
    mode: 'javascript',
    theme: 'dracula',
    lineNumbers: true,
    matchBrackets: true,
    autoCloseBrackets: true,
    indentUnit: 2,
    tabSize: 2,
    value: `// Rootkit Hunter Implementation
class RootkitHunter {
  constructor() {
    this.signatureDB = {
      "ntoskrnl.exe": {
        originalHash: "7a9b5a0e8b4c2d1f3e5d7c9b8a6f4e2d",
        knownHooks: ["NtCreateFile", "NtOpenProcess", "NtQuerySystemInformation"]
      },
      "ntdll.dll": {
        originalHash: "3e5d7c9b8a6f4e2d1f3e5d7c9b8a6f4e",
        knownHooks: ["ZwQuerySystemInformation", "ZwOpenProcess"]
      }
    };
    
    this.maliciousIPs = [
      "45.77.65.211",
      "185.225.17.32",
      "91.121.87.10"
    ];
    
    this.detectionResults = [];
    this.rootkitAnalysis = {};
    this.removalActions = [];
  }
  
  compareProcessLists(apiProcessList, memoryProcessList) {
    // Your implementation here
    // Compare process lists from different sources
  }
  
  checkSystemFiles(systemFiles) {
    // Your implementation here
    // Check system files for modifications
  }
  
  checkRegistry(hiddenRegistryKeys) {
    // Your implementation here
    // Check for hidden registry entries
  }
  
  analyzeNetworkConnections(connections) {
    // Your implementation here
    // Analyze network connections
  }
  
  analyzeRootkit() {
    // Your implementation here
    // Analyze detected rootkit characteristics
  }
  
  removeRootkit() {
    // Your implementation here
    // Perform rootkit removal procedures
  }
  
  generateReport() {
    // Your implementation here
    // Generate detection and analysis report
  }
}

// Example usage
const hunter = new RootkitHunter();

// Test data
const apiProcessList = [
  "System", "smss.exe", "csrss.exe", 
  "winlogon.exe", "services.exe"
];
const memoryProcessList = [
  "System", "smss.exe", "csrss.exe",
  "winlogon.exe", "services.exe", "hiddenproc.exe"
];
const modifiedSystemFiles = [
  { 
    name: "ntoskrnl.exe",
    currentHash: "7a9b5a0e8b4c2d1f3e5d7c9b8a6f4e2c"
  },
  { 
    name: "ntdll.dll",
    currentHash: "3e5d7c9b8a6f4e2d1f3e5d7c9b8a6f4d"
  }
];
const hiddenRegistryKeys = [
  "HKLM\\SYSTEM\\CurrentControlSet\\Services\\HiddenService"
];
const connections = [
  { 
    source: "192.168.1.5:4321",
    destination: "45.77.65.211:443"
  }
];

// Run detection
console.log("Starting rootkit analysis...");

hunter.compareProcessLists(apiProcessList, memoryProcessList);
hunter.checkSystemFiles(modifiedSystemFiles);
hunter.checkRegistry(hiddenRegistryKeys);
hunter.analyzeNetworkConnections(connections);
hunter.analyzeRootkit();
hunter.removeRootkit();

const report = hunter.generateReport();
console.log(report);`
  });

  // Language selection
  const languageSelect = document.getElementById('language-select');
  const currentLanguage = document.getElementById('current-language');
  const languages = ['JavaScript', 'Python', 'Java'];
  let currentLangIndex = 0;

  languageSelect.addEventListener('click', () => {
    currentLangIndex = (currentLangIndex + 1) % languages.length;
    const lang = languages[currentLangIndex];
    currentLanguage.textContent = lang;
    editor.setOption('mode', lang.toLowerCase());
  });

  // Clear code button
  document.getElementById('clear-code').addEventListener('click', () => {
    if (confirm('Are you sure you want to clear your code? This cannot be undone.')) {
      editor.setValue('');
    }
  });

  // Run code button
  document.getElementById('run-code').addEventListener('click', () => {
    const code = editor.getValue();
    if (!code.trim()) {
      if (window.showNotification) {
        window.showNotification('Please write some code before running.', 'error');
      } else {
        alert('Please write some code before running.');
      }
      return;
    }

    const output = document.getElementById('output');
    output.textContent = 'Running code...\n';

    // Simulate code execution
    setTimeout(() => {
      try {
        output.textContent = `Starting rootkit analysis...

Rootkit Detection Results:
- Cross-View Discrepancy: Process "hiddenproc.exe" visible in memory but hidden from API
- System File Modification: ntoskrnl.exe has been modified (possible SSDT hooks)
- System File Modification: ntdll.dll has been modified (possible API hooks)
- Hidden Registry Entry: HKLM\\SYSTEM\\CurrentControlSet\\Services\\HiddenService
- Suspicious Network Activity: Connection to known C2 server 45.77.65.211

Rootkit Analysis:
- Rootkit Type: Kernel-mode rootkit with userland components
- Identified as: "XYZ Rootkit" (95% confidence)
- Persistence Method: Boot-time loading via modified kernel + registry autorun
- Stealth Method: SSDT hooking + API hooking

Removal Actions:
1. System booted in safe mode with clean kernel
2. Removed malicious process "hiddenproc.exe" (PID: 3452)
3. Restored clean copies of ntoskrnl.exe and ntdll.dll from backup
4. Removed registry key HKLM\\SYSTEM\\CurrentControlSet\\Services\\HiddenService
5. Added firewall rule to block connections to 45.77.65.211
6. Recommended full system scan after reboot`;

        if (window.showNotification) {
          window.showNotification('Code executed successfully!', 'success');
        }
      } catch (error) {
        output.textContent = `Error: ${error.message}`;
        if (window.showNotification) {
          window.showNotification('Error executing code: ' + error.message, 'error');
        }
      }
    }, 1000);
  });

  // Submit code button
  document.getElementById('submit-code').addEventListener('click', () => {
    const code = editor.getValue();
    const output = document.getElementById('output').textContent;

    if (!code.trim()) {
      if (window.showNotification) {
        window.showNotification('Please write some code before submitting.', 'error');
      } else {
        alert('Please write some code before submitting.');
      }
      return;
    }

    if (output === 'Output will appear here...') {
      if (window.showNotification) {
        window.showNotification('Please run your code before submitting.', 'error');
      } else {
        alert('Please run your code before submitting.');
      }
      return;
    }

    // Submit code to server
    fetch('/experiments/defeating-malware-rootkit-hunter/submit', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ code, output })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        if (window.showNotification) {
          window.showNotification('Code submitted successfully!', 'success');
        } else {
          alert('Code submitted successfully!');
        }
        
        // Update progress in localStorage
        const progress = JSON.parse(localStorage.getItem('experimentProgress') || '{}');
        progress['defeating-malware-rootkit-hunter'] = true;
        localStorage.setItem('experimentProgress', JSON.stringify(progress));
      } else {
        throw new Error(data.message || 'Submission failed');
      }
    })
    .catch(error => {
      console.error('Submit error:', error);
      if (window.showNotification) {
        window.showNotification('Error submitting code: ' + error.message, 'error');
      } else {
        alert('Error submitting code: ' + error.message);
      }
    });
  });

  // Visualization
  const visualizeBtn = document.getElementById('visualize-btn');
  const visualizationSection = document.getElementById('visualization-section');
  const visualizationTable = document.getElementById('visualization-table');
  const outputText = document.getElementById('output-text');
  const scanType = document.getElementById('scan-type');
  const targetPath = document.getElementById('target-path');

  visualizeBtn.addEventListener('click', () => {
    const type = scanType.value;
    const path = targetPath.value.trim();

    if (!path) {
      if (window.showNotification) {
        window.showNotification('Please enter a target path.', 'error');
      } else {
        alert('Please enter a target path.');
      }
      return;
    }

    // Show visualization section
    visualizationSection.classList.remove('d-none');

    // Update visualization table based on scan type
    visualizationTable.innerHTML = `
      <thead class="table-dark">
        <tr>
          <th>Step</th>
          <th>Operation</th>
          <th>Result</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>1</td>
          <td>Initialize Scanner</td>
          <td>Scanner initialized for ${type} scan</td>
        </tr>
        <tr>
          <td>2</td>
          <td>Check System Files</td>
          <td class="text-warning">Modified system files detected</td>
        </tr>
        <tr>
          <td>3</td>
          <td>Memory Analysis</td>
          <td class="text-danger">Hidden process found</td>
        </tr>
        <tr>
          <td>4</td>
          <td>Registry Check</td>
          <td class="text-danger">Hidden registry entries detected</td>
        </tr>
        <tr>
          <td>5</td>
          <td>Network Analysis</td>
          <td class="text-warning">Suspicious connections found</td>
        </tr>
      </tbody>
    `;

    // Update output text
    outputText.innerHTML = `<div class="text-danger">
      <strong>Rootkit Detection Summary:</strong><br>
      - Hidden process detected in memory<br>
      - System files have been modified<br>
      - Hidden registry entries found<br>
      - Suspicious network connections detected<br>
      <br>
      <strong>Recommendation:</strong> System should be cleaned in safe mode
    </div>`;
  });
});
</script>

<%- include('../partials/footer') %>